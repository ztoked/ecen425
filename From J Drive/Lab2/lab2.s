; Generated by c86 (BYU-NASM) 5.1 (beta) from lab2.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
L_lab2_1:
	DW	0
L_lab2_3:
	DB	", j = ",0
L_lab2_2:
	DB	"in a(), i = ",0
	ALIGN	2
a:
	; >>>>> Line:	8
	; >>>>> { 
	jmp	L_lab2_4
L_lab2_5:
	; >>>>> Line:	12
	; >>>>> i++; 
	mov	word [bp-2], 0
	; >>>>> Line:	12
	; >>>>> i++; 
	inc	word [L_lab2_1]
	; >>>>> Line:	13
	; >>>>> j++; 
	inc	word [bp-2]
	; >>>>> Line:	14
	; >>>>> printString("in a(), i = "); 
	mov	ax, L_lab2_2
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	15
	; >>>>> printInt(i); 
	push	word [L_lab2_1]
	call	printInt
	add	sp, 2
	; >>>>> Line:	16
	; >>>>> printString(", j = "); 
	mov	ax, L_lab2_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	17
	; >>>>> printInt(j); 
	push	word [bp-2]
	call	printInt
	add	sp, 2
	; >>>>> Line:	18
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_lab2_4:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab2_5
L_lab2_7:
	DB	"in b()",0xA,0
	ALIGN	2
b:
	; >>>>> Line:	22
	; >>>>> { 
	jmp	L_lab2_8
L_lab2_9:
	; >>>>> Line:	23
	; >>>>> printString("in b()\n"); 
	mov	ax, L_lab2_7
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	24
	; >>>>> a(); 
	call	a
	mov	sp, bp
	pop	bp
	ret
L_lab2_8:
	push	bp
	mov	bp, sp
	jmp	L_lab2_9
	ALIGN	2
fibonacci:
	; >>>>> Line:	28
	; >>>>> { 
	jmp	L_lab2_11
L_lab2_12:
	; >>>>> Line:	29
	; >>>>> if (n == 1) 
	cmp	word [bp+4], 1
	jne	L_lab2_13
	; >>>>> Line:	30
	; >>>>> return 1; 
	mov	ax, 1
	jmp	L_lab2_14
	jmp	L_lab2_15
L_lab2_13:
	; >>>>> Line:	31
	; >>>>> else if (n == 2) 
	cmp	word [bp+4], 2
	jne	L_lab2_16
	; >>>>> Line:	32
	; >>>>> return 2; 
	mov	ax, 2
	jmp	L_lab2_14
	jmp	L_lab2_17
L_lab2_16:
	; >>>>> Line:	34
	; >>>>> return fibonacci(n-1) + fibonacci(n-2); 
	mov	ax, word [bp+4]
	dec	ax
	push	ax
	call	fibonacci
	add	sp, 2
	push	ax
	mov	dx, word [bp+4]
	sub	dx, 2
	push	dx
	call	fibonacci
	mov	dx, ax
	add	sp, 2
	pop	ax
	add	ax, dx
L_lab2_17:
L_lab2_15:
L_lab2_14:
	mov	sp, bp
	pop	bp
	ret
L_lab2_11:
	push	bp
	mov	bp, sp
	jmp	L_lab2_12
L_lab2_20:
	DB	" is ",0
L_lab2_19:
	DB	"Fibonnaci number ",0
	ALIGN	2
main:
	; >>>>> Line:	38
	; >>>>> { 
	jmp	L_lab2_21
L_lab2_22:
	; >>>>> Line:	39
	; >>>>> a(); 
	call	a
	; >>>>> Line:	40
	; >>>>> b(); 
	call	b
	; >>>>> Line:	41
	; >>>>> for (k = 1; k <= 10; k++) { 
	mov	word [k], 1
	jmp	L_lab2_24
L_lab2_23:
	; >>>>> Line:	42
	; >>>>> prin 
	mov	ax, L_lab2_19
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	43
	; >>>>> printInt(k); 
	push	word [k]
	call	printInt
	add	sp, 2
	; >>>>> Line:	44
	; >>>>> printString(" is "); 
	mov	ax, L_lab2_20
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	45
	; >>>>> printInt(fibonacci(k)); 
	push	word [k]
	call	fibonacci
	add	sp, 2
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	46
	; >>>>> printNewLine(); 
	call	printNewLine
L_lab2_26:
	inc	word [k]
L_lab2_24:
	cmp	word [k], 10
	jle	L_lab2_23
L_lab2_25:
	mov	sp, bp
	pop	bp
	ret
L_lab2_21:
	push	bp
	mov	bp, sp
	jmp	L_lab2_22
	ALIGN	2
k:
	TIMES	2 db 0
