; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
FLAGS_MASK:
	DW	512
YKInterruptDepth:
	DW	0
kernelStarted:
	DW	0
readyToStart:
	DB	0
runningTask:
	DB	0
firstTime:
	DB	1
	ALIGN	2
YKInitialize:
	; >>>>> Line:	28
	; >>>>> { 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	30
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	32
	; >>>>> for (i = 0; i < 4; ++i) 
	mov	word [bp-2], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	34
	; >>>>> YKTCBArray[i].priority = 100; 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 6
	mov	byte [si], 100
	; >>>>> Line:	35
	; >>>>> YKTCBArray[i].inUse = 0; 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 10
	mov	byte [si], 0
L_yakc_6:
	inc	word [bp-2]
L_yakc_4:
	cmp	word [bp-2], 4
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	38
	; >>>>> YKNewTask(YKIdleTask, (void *)&IdleStk[256], 99); 
	mov	al, 99
	push	ax
	mov	ax, (IdleStk+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	39
	; >>>>> readyToStart = 0; 
	mov	byte [readyToStart], 0
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_2
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	44
	; >>>>> { 
	jmp	L_yakc_8
L_yakc_9:
	; >>>>> Line:	45
	; >>>>> while(1) 
	jmp	L_yakc_11
L_yakc_10:
	; >>>>> Line:	47
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	48
	; >>>>> ++YKIdleCount; 
	inc	word [YKIdleCount]
	; >>>>> Line:	49
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_11:
	jmp	L_yakc_10
L_yakc_12:
	mov	sp, bp
	pop	bp
	ret
L_yakc_8:
	push	bp
	mov	bp, sp
	jmp	L_yakc_9
	ALIGN	2
YKNewTask:
	; >>>>> Line:	54
	; >>>>> { 
	jmp	L_yakc_14
L_yakc_15:
	; >>>>> Line:	56
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	58
	; >>>>> for (i = 0; i <= 4; ++i) 
	mov	word [bp-2], 0
	jmp	L_yakc_17
L_yakc_16:
	; >>>>> Line:	60
	; >>>>> if (!YKTCBArray[i].inUse) 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 10
	mov	al, byte [si]
	test	al, al
	jne	L_yakc_20
	; >>>>> Line:	61
	; >>>>> break; 
	jmp	L_yakc_18
L_yakc_20:
L_yakc_19:
	inc	word [bp-2]
L_yakc_17:
	cmp	word [bp-2], 4
	jle	L_yakc_16
L_yakc_18:
	; >>>>> Line:	64
	; >>>>> YKTCBArray[i].ip = (unsigned int) task; 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	mov	si, ax
	add	si, YKTCBArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	65
	; >>>>> YKTCBArray[i].stackptr = taskStack; 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	66
	; >>>>> YKTCBArray[i].state = READY; 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 3
	; >>>>> Line:	67
	; >>>>> YKTCBArray[i].delay = 0; 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	68
	; >>>>> YKTCBArray[i].inUse = 1; 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 10
	mov	byte [si], 1
	; >>>>> Line:	69
	; >>>>> YKTCBArray[i].priority = priority; 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 6
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	70
	; >>>>> YKCreateContext(YKTCBArray[i].stackptr, YKTCBArray[i].ip); 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	mov	si, ax
	add	si, YKTCBArray
	push	word [si]
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 2
	push	word [si]
	call	YKCreateContext
	add	sp, 4
	; >>>>> Line:	71
	; >>>>> YKTCBArray[i].stackptr += 24; 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 2
	add	word [si], -24
	; >>>>> Line:	72
	; >>>>> readyToStart = 1; 
	mov	byte [readyToStart], 1
	; >>>>> Line:	74
	; >>>>> if(kernelStarted) 
	mov	ax, word [kernelStarted]
	test	ax, ax
	je	L_yakc_21
	; >>>>> Line:	76
	; >>>>> currentTask = &YKTCBArray[i] 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	word [currentTask], ax
	; >>>>> Line:	77
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_21:
	mov	sp, bp
	pop	bp
	ret
L_yakc_14:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_15
	ALIGN	2
YKRun:
	; >>>>> Line:	83
	; >>>>> { 
	jmp	L_yakc_23
L_yakc_24:
	; >>>>> Line:	84
	; >>>>> if (kernelStarted || !readyToStart) 
	mov	ax, word [kernelStarted]
	test	ax, ax
	jne	L_yakc_26
	mov	al, byte [readyToStart]
	test	al, al
	jne	L_yakc_25
L_yakc_26:
	; >>>>> Line:	85
	; >>>>> return; 
	jmp	L_yakc_27
L_yakc_25:
	; >>>>> Line:	88
	; >>>>> kernelStarted = 1; 
	mov	word [kernelStarted], 1
	; >>>>> Line:	91
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_27:
	mov	sp, bp
	pop	bp
	ret
L_yakc_23:
	push	bp
	mov	bp, sp
	jmp	L_yakc_24
	ALIGN	2
YKScheduler:
	; >>>>> Line:	95
	; >>>>> { 
	jmp	L_yakc_29
L_yakc_30:
	; >>>>> Line:	100
	; >>>>> if (!kernelStarted) return; 
	mov	byte [bp-3], 100
	mov	byte [bp-4], 0
	; >>>>> Line:	100
	; >>>>> if (!kernelStarted) return; 
	mov	ax, word [kernelStarted]
	test	ax, ax
	jne	L_yakc_31
	; >>>>> Line:	100
	; >>>>> if (!kernelStarted) return; 
	jmp	L_yakc_32
L_yakc_31:
	; >>>>> Line:	102
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	104
	; >>>>> for (i = 0; i <= 4; ++i) 
	mov	word [bp-2], 0
	jmp	L_yakc_34
L_yakc_33:
	; >>>>> Line:	106
	; >>>>> if (!YKTCBArray[i].inUse) 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 10
	mov	al, byte [si]
	test	al, al
	jne	L_yakc_37
	; >>>>> Line:	107
	; >>>>> break; 
	jmp	L_yakc_35
L_yakc_37:
	; >>>>> Line:	108
	; >>>>> if (YKTCBArray[i].priority < maxPriority && YKTCBArray[i].state == READY) 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 6
	mov	al, byte [si]
	cbw
	mov	dl, byte [bp-3]
	xor	dh, dh
	cmp	dx, ax
	jle	L_yakc_38
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	cmp	word [si], 3
	jne	L_yakc_38
	; >>>>> Line:	110
	; >>>>> maxPriority = YKTCBArray[i].priority; 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 6
	mov	al, byte [si]
	mov	byte [bp-3], al
	; >>>>> Line:	111
	; >>>>> toRun = i; 
	mov	al, byte [bp-2]
	mov	byte [bp-4], al
L_yakc_38:
L_yakc_36:
	inc	word [bp-2]
L_yakc_34:
	cmp	word [bp-2], 4
	jle	L_yakc_33
L_yakc_35:
	; >>>>> Line:	114
	; >>>>> nextTask = &YKTCBArray[toRu 
	mov	al, byte [bp-4]
	xor	ah, ah
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	word [nextTask], ax
	; >>>>> Line:	116
	; >>>>> if (runningTask == toRun && !firstTime) 
	mov	al, byte [bp-4]
	cmp	al, byte [runningTask]
	jne	L_yakc_39
	mov	al, byte [firstTime]
	test	al, al
	jne	L_yakc_39
	; >>>>> Line:	118
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	119
	; >>>>> return; 
	jmp	L_yakc_32
L_yakc_39:
	; >>>>> Line:	121
	; >>>>> if(firstTime) { 
	mov	al, byte [firstTime]
	test	al, al
	je	L_yakc_40
	; >>>>> Line:	122
	; >>>>> firstTime = 0; 
	mov	byte [firstTime], 0
	; >>>>> Line:	123
	; >>>>> currentTask = &YKTCBArray[toRun]; 
	mov	al, byte [bp-4]
	xor	ah, ah
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	word [currentTask], ax
	; >>>>> Line:	124
	; >>>>> runningTask = toRun; 
	mov	al, byte [bp-4]
	mov	byte [runningTask], al
	; >>>>> Line:	125
	; >>>>> YKDispatcherFirst(); 
	call	YKDispatcherFirst
L_yakc_40:
	; >>>>> Line:	127
	; >>>>> ++YKCtxSwCount; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	128
	; >>>>> currentTask = &YKTCBArray[runningTask]; 
	mov	al, byte [runningTask]
	xor	ah, ah
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	word [currentTask], ax
	; >>>>> Line:	129
	; >>>>> runningTask = toRun; 
	mov	al, byte [bp-4]
	mov	byte [runningTask], al
	; >>>>> Line:	130
	; >>>>> YKDispatcher(); 
	call	YKDispatcher
L_yakc_32:
	mov	sp, bp
	pop	bp
	ret
L_yakc_29:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_30
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	135
	; >>>>> { 
	jmp	L_yakc_42
L_yakc_43:
	; >>>>> Line:	136
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	138
	; >>>>> YKTCBArray[runningTask].delay = count; 
	mov	al, byte [runningTask]
	xor	ah, ah
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	139
	; >>>>> YKTCBArray[runningTask].state = DELAYED; 
	mov	al, byte [runningTask]
	xor	ah, ah
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	; >>>>> Line:	140
	; >>>>> YKScheduler(); 
	call	YKScheduler
	; >>>>> Line:	142
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_42:
	push	bp
	mov	bp, sp
	jmp	L_yakc_43
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	146
	; >>>>> { 
	jmp	L_yakc_45
L_yakc_46:
	; >>>>> Line:	147
	; >>>>> ++YKInterruptDepth 
	inc	word [YKInterruptDepth]
	mov	sp, bp
	pop	bp
	ret
L_yakc_45:
	push	bp
	mov	bp, sp
	jmp	L_yakc_46
	ALIGN	2
YKExitISR:
	; >>>>> Line:	151
	; >>>>> { 
	jmp	L_yakc_48
L_yakc_49:
	; >>>>> Line:	152
	; >>>>> --YKInterruptDepth; 
	dec	word [YKInterruptDepth]
	; >>>>> Line:	153
	; >>>>> if(YKInterruptDepth == 0 && kernelStarted && readyToStart) { 
	mov	ax, word [YKInterruptDepth]
	test	ax, ax
	jne	L_yakc_50
	mov	ax, word [kernelStarted]
	test	ax, ax
	je	L_yakc_50
	mov	al, byte [readyToStart]
	test	al, al
	je	L_yakc_50
	; >>>>> Line:	154
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_50:
	mov	sp, bp
	pop	bp
	ret
L_yakc_48:
	push	bp
	mov	bp, sp
	jmp	L_yakc_49
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	159
	; >>>>> { 
	jmp	L_yakc_52
L_yakc_53:
	; >>>>> Line:	161
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	162
	; >>>>> ++YKTickNum; 
	inc	word [YKTickNum]
	; >>>>> Line:	163
	; >>>>> for (i = 1; i <= 4; ++i) 
	mov	word [bp-2], 1
	jmp	L_yakc_55
L_yakc_54:
	; >>>>> Line:	165
	; >>>>> if(YKTCBArray[i].state == DELAYED) { 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	cmp	word [si], 1
	jne	L_yakc_58
	; >>>>> Line:	166
	; >>>>> if(YKTCBArray[i].delay == 1) { 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 8
	cmp	word [si], 1
	jne	L_yakc_59
	; >>>>> Line:	167
	; >>>>> YKTCBArray[i].state = READY; 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 3
L_yakc_59:
	; >>>>> Line:	169
	; >>>>> --YKTCBArray[i].delay; 
	mov	ax, word [bp-2]
	mov	cx, 12
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 8
	dec	word [si]
L_yakc_58:
L_yakc_57:
	inc	word [bp-2]
L_yakc_55:
	cmp	word [bp-2], 4
	jle	L_yakc_54
L_yakc_56:
	mov	sp, bp
	pop	bp
	ret
L_yakc_52:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_53
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
IdleStk:
	TIMES	512 db 0
currentTask:
	TIMES	2 db 0
nextTask:
	TIMES	2 db 0
YKTCBArray:
	TIMES	60 db 0
