; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
L_myinth_1:
	DW	0
L_myinth_2:
	DB	"TickISR: queue overflow!",0xA,0
	ALIGN	2
newPieceHandler:
	; >>>>> Line:	28
	; >>>>> { 
	jmp	L_myinth_3
L_myinth_4:
	; >>>>> Line:	31
	; >>>>> pieceArray[next].id = NewPieceID; 
	mov	ax, word [L_myinth_1]
	mov	cx, 3
	shl	ax, cl
	mov	si, ax
	add	si, pieceArray
	mov	ax, word [NewPieceID]
	mov	word [si], ax
	; >>>>> Line:	32
	; >>>>> pieceArray[next].type = NewPieceType; 
	mov	ax, word [L_myinth_1]
	mov	cx, 3
	shl	ax, cl
	add	ax, pieceArray
	mov	si, ax
	add	si, 2
	mov	ax, word [NewPieceType]
	mov	word [si], ax
	; >>>>> Line:	33
	; >>>>> pieceArray[next].orientation = NewPieceOrientation; 
	mov	ax, word [L_myinth_1]
	mov	cx, 3
	shl	ax, cl
	add	ax, pieceArray
	mov	si, ax
	add	si, 4
	mov	ax, word [NewPieceOrientation]
	mov	word [si], ax
	; >>>>> Line:	34
	; >>>>> pieceArray[next].column = NewPieceColumn; 
	mov	ax, word [L_myinth_1]
	mov	cx, 3
	shl	ax, cl
	add	ax, pieceArray
	mov	si, ax
	add	si, 6
	mov	ax, word [NewPieceColumn]
	mov	word [si], ax
	; >>>>> Line:	36
	; >>>>> if (YKQPost(PieceQPtr, (void *) &(pieceArray[next])) == 0) 
	mov	ax, word [L_myinth_1]
	mov	cx, 3
	shl	ax, cl
	add	ax, pieceArray
	push	ax
	push	word [PieceQPtr]
	call	YKQPost
	add	sp, 4
	test	ax, ax
	jne	L_myinth_5
	; >>>>> Line:	38
	; >>>>> printString("TickISR: queue overflow!\n"); 
	mov	ax, L_myinth_2
	push	ax
	call	printString
	add	sp, 2
	jmp	L_myinth_6
L_myinth_5:
	; >>>>> Line:	40
	; >>>>> else if (++next >= 40) 
	mov	ax, word [L_myinth_1]
	inc	ax
	mov	word [L_myinth_1], ax
	cmp	ax, 40
	jl	L_myinth_7
	; >>>>> Line:	42
	; >>>>> next = 0; 
	mov	word [L_myinth_1], 0
L_myinth_7:
L_myinth_6:
	mov	sp, bp
	pop	bp
	ret
L_myinth_3:
	push	bp
	mov	bp, sp
	jmp	L_myinth_4
	ALIGN	2
receivedCommandHandler:
	; >>>>> Line:	63
	; >>>>> { 
	jmp	L_myinth_9
L_myinth_10:
	; >>>>> Line:	64
	; >>>>> YKSemPost(commandSem); 
	push	word [commandSem]
	call	YKSemPost
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_9:
	push	bp
	mov	bp, sp
	jmp	L_myinth_10
	ALIGN	2
touchdownHandler:
	; >>>>> Line:	82
	; >>>>> { 
	jmp	L_myinth_12
L_myinth_13:
	; >>>>> Line:	83
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_myinth_12:
	push	bp
	mov	bp, sp
	jmp	L_myinth_13
	ALIGN	2
lineClearHandler:
	; >>>>> Line:	91
	; >>>>> { 
	jmp	L_myinth_15
L_myinth_16:
	; >>>>> Line:	92
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_myinth_15:
	push	bp
	mov	bp, sp
	jmp	L_myinth_16
L_myinth_18:
	DB	"GAMEOVER",0xA,0
	ALIGN	2
gameoverHandler:
	; >>>>> Line:	99
	; >>>>> { 
	jmp	L_myinth_19
L_myinth_20:
	; >>>>> Line:	100
	; >>>>> printString("GAMEOVER\n"); 
	mov	ax, L_myinth_18
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	101
	; >>>>> exit(0); 
	xor	al, al
	push	ax
	call	exit
	add	sp, 2
	mov	sp, bp
	pop	bp
	ret
L_myinth_19:
	push	bp
	mov	bp, sp
	jmp	L_myinth_20
	ALIGN	2
tickHandler:
	; >>>>> Line:	105
	; >>>>> { 
	jmp	L_myinth_22
L_myinth_23:
	; >>>>> Line:	107
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_myinth_22:
	push	bp
	mov	bp, sp
	jmp	L_myinth_23
	ALIGN	2
keyboardHandler:
	; >>>>> Line:	110
	; >>>>> { 
	jmp	L_myinth_25
L_myinth_26:
	; >>>>> Line:	111
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_myinth_25:
	push	bp
	mov	bp, sp
	jmp	L_myinth_26
