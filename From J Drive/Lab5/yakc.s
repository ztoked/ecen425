; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
FLAGS_MASK:
	DW	512
YKInterruptDepth:
	DW	0
kernelStarted:
	DW	0
readyToStart:
	DB	0
runningTask:
	DB	0
firstTime:
	DB	1
	ALIGN	2
pushedLevel:
	DW	0
contextSaved:
	DB	0
	ALIGN	2
semIndex:
	DW	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	32
	; >>>>> { 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	34
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	36
	; >>>>> for (i = 0; i < 5; ++i) 
	mov	word [bp-2], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	38
	; >>>>> YKTCBArray[i].priority = 100; 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 6
	mov	byte [si], 100
	; >>>>> Line:	39
	; >>>>> YKTCBArray[i].inUse = 0; 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 12
	mov	byte [si], 0
L_yakc_6:
	inc	word [bp-2]
L_yakc_4:
	cmp	word [bp-2], 5
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	42
	; >>>>> YKNewTask(YKIdleTask, (void *)&IdleStk[256], 99); 
	mov	al, 99
	push	ax
	mov	ax, (IdleStk+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	43
	; >>>>> readyToStart = 0; 
	mov	byte [readyToStart], 0
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_2
L_yakc_8:
	DB	"Pushed: ",0
	ALIGN	2
pushed:
	; >>>>> Line:	46
	; >>>>> { 
	jmp	L_yakc_9
L_yakc_10:
	; >>>>> Line:	47
	; >>>>> pushedLevel = pushedLevel + 1; 
	mov	ax, word [pushedLevel]
	inc	ax
	mov	word [pushedLevel], ax
	; >>>>> Line:	48
	; >>>>> printString("Pushed: "); 
	mov	ax, L_yakc_8
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	49
	; >>>>> printInt(pushedLevel); 
	push	word [pushedLevel]
	call	printInt
	add	sp, 2
	; >>>>> Line:	50
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_yakc_9:
	push	bp
	mov	bp, sp
	jmp	L_yakc_10
L_yakc_12:
	DB	"Popped: ",0
	ALIGN	2
popped:
	; >>>>> Line:	54
	; >>>>> { 
	jmp	L_yakc_13
L_yakc_14:
	; >>>>> Line:	55
	; >>>>> pushedLevel = pushedLevel - 1; 
	mov	ax, word [pushedLevel]
	dec	ax
	mov	word [pushedLevel], ax
	; >>>>> Line:	56
	; >>>>> printString("Popped: "); 
	mov	ax, L_yakc_12
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	57
	; >>>>> printInt(pushedLevel); 
	push	word [pushedLevel]
	call	printInt
	add	sp, 2
	; >>>>> Line:	58
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_yakc_13:
	push	bp
	mov	bp, sp
	jmp	L_yakc_14
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	62
	; >>>>> { 
	jmp	L_yakc_16
L_yakc_17:
	; >>>>> Line:	63
	; >>>>> while(1) 
	jmp	L_yakc_19
L_yakc_18:
	; >>>>> Line:	65
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	66
	; >>>>> ++YKIdleCo 
	inc	word [YKIdleCount]
	; >>>>> Line:	67
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_19:
	jmp	L_yakc_18
L_yakc_20:
	mov	sp, bp
	pop	bp
	ret
L_yakc_16:
	push	bp
	mov	bp, sp
	jmp	L_yakc_17
	ALIGN	2
YKNewTask:
	; >>>>> Line:	72
	; >>>>> { 
	jmp	L_yakc_22
L_yakc_23:
	; >>>>> Line:	74
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	76
	; >>>>> for (i = 0; i <= 5; ++i) 
	mov	word [bp-2], 0
	jmp	L_yakc_25
L_yakc_24:
	; >>>>> Line:	78
	; >>>>> if (!YKTCBArray[i].inUse) 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 12
	mov	al, byte [si]
	test	al, al
	jne	L_yakc_28
	; >>>>> Line:	79
	; >>>>> break; 
	jmp	L_yakc_26
L_yakc_28:
L_yakc_27:
	inc	word [bp-2]
L_yakc_25:
	cmp	word [bp-2], 5
	jle	L_yakc_24
L_yakc_26:
	; >>>>> Line:	82
	; >>>>> YKTCBArray[i].ip = (unsigned int) task; 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	mov	si, ax
	add	si, YKTCBArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	83
	; >>>>> YKTCBArray[i].stackptr = taskStack; 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	84
	; >>>>> YKTCBArray[i].state = READY; 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 3
	; >>>>> Line:	85
	; >>>>> YKTCBArray[i].delay = 0; 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	86
	; >>>>> YKTCBArray[i].inUse = 1; 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 12
	mov	byte [si], 1
	; >>>>> Line:	87
	; >>>>> YKTCBArray[i].priority = priority; 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 6
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	88
	; >>>>> YKCreateContext(YKTCBArray[i].stackptr, YKTCBArray[i].ip); 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	mov	si, ax
	add	si, YKTCBArray
	push	word [si]
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 2
	push	word [si]
	call	YKCreateContext
	add	sp, 4
	; >>>>> Line:	89
	; >>>>> YKTCBArray[i].stackptr += 24; 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 2
	add	word [si], -24
	; >>>>> Line:	90
	; >>>>> readyToStart = 1; 
	mov	byte [readyToStart], 1
	; >>>>> Line:	92
	; >>>>> if(kernelStarted) 
	mov	ax, word [kernelStarted]
	test	ax, ax
	je	L_yakc_29
	; >>>>> Line:	94
	; >>>>> currentTask = &YKTCBArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	word [currentTask], ax
	; >>>>> Line:	95
	; >>>>> contextSaved = 0; 
	mov	byte [contextSaved], 0
	; >>>>> Line:	96
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_29:
	mov	sp, bp
	pop	bp
	ret
L_yakc_22:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_23
	ALIGN	2
YKRun:
	; >>>>> Line:	102
	; >>>>> { 
	jmp	L_yakc_31
L_yakc_32:
	; >>>>> Line:	103
	; >>>>> if (kernelStarted || !readyToStart) 
	mov	ax, word [kernelStarted]
	test	ax, ax
	jne	L_yakc_34
	mov	al, byte [readyToStart]
	test	al, al
	jne	L_yakc_33
L_yakc_34:
	; >>>>> Line:	104
	; >>>>> return; 
	jmp	L_yakc_35
L_yakc_33:
	; >>>>> Line:	107
	; >>>>> kernelStarted = 1; 
	mov	word [kernelStarted], 1
	; >>>>> Line:	109
	; >>>>> contextSaved = 0; 
	mov	byte [contextSaved], 0
	; >>>>> Line:	110
	; >>>>> YKScheduler(); 
	call	YKScheduler
	; >>>>> Line:	111
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_35:
	mov	sp, bp
	pop	bp
	ret
L_yakc_31:
	push	bp
	mov	bp, sp
	jmp	L_yakc_32
	ALIGN	2
YKScheduler:
	; >>>>> Line:	115
	; >>>>> { 
	jmp	L_yakc_37
L_yakc_38:
	; >>>>> Line:	120
	; >>>>> if (!kernelStarted) return; 
	mov	byte [bp-3], 100
	mov	byte [bp-4], 0
	; >>>>> Line:	120
	; >>>>> if (!kernelStarted) return; 
	mov	ax, word [kernelStarted]
	test	ax, ax
	jne	L_yakc_39
	; >>>>> Line:	120
	; >>>>> if (!kernelStarted) return; 
	jmp	L_yakc_40
L_yakc_39:
	; >>>>> Line:	122
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	124
	; >>>>> for (i = 0; i <= 5; ++i) 
	mov	word [bp-2], 0
	jmp	L_yakc_42
L_yakc_41:
	; >>>>> Line:	126
	; >>>>> if (!YKTCBArray[i].inUse) 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 12
	mov	al, byte [si]
	test	al, al
	jne	L_yakc_45
	; >>>>> Line:	127
	; >>>>> break; 
	jmp	L_yakc_43
L_yakc_45:
	; >>>>> Line:	128
	; >>>>> if (YKTCBArray[i].priority < maxPriority && YKTCBArray[i].state 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 6
	mov	al, byte [si]
	cbw
	mov	dl, byte [bp-3]
	xor	dh, dh
	cmp	dx, ax
	jle	L_yakc_46
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	cmp	word [si], 3
	jne	L_yakc_46
	; >>>>> Line:	130
	; >>>>> maxPriority = YKTCBArray[i].priority; 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 6
	mov	al, byte [si]
	mov	byte [bp-3], al
	; >>>>> Line:	131
	; >>>>> toRun = i; 
	mov	al, byte [bp-2]
	mov	byte [bp-4], al
L_yakc_46:
L_yakc_44:
	inc	word [bp-2]
L_yakc_42:
	cmp	word [bp-2], 5
	jle	L_yakc_41
L_yakc_43:
	; >>>>> Line:	134
	; >>>>> nextTask = &YKTCBArray[toRun]; 
	mov	al, byte [bp-4]
	xor	ah, ah
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	word [nextTask], ax
	; >>>>> Line:	136
	; >>>>> if (runningTask == toRun && !firstTime) 
	mov	al, byte [bp-4]
	cmp	al, byte [runningTask]
	jne	L_yakc_47
	mov	al, byte [firstTime]
	test	al, al
	jne	L_yakc_47
	; >>>>> Line:	139
	; >>>>> return; 
	jmp	L_yakc_40
L_yakc_47:
	; >>>>> Line:	141
	; >>>>> if(firstTime) { 
	mov	al, byte [firstTime]
	test	al, al
	je	L_yakc_48
	; >>>>> Line:	142
	; >>>>> firstTime = 0; 
	mov	byte [firstTime], 0
	; >>>>> Line:	143
	; >>>>> currentTask = &YKTCBArray[toRun]; 
	mov	al, byte [bp-4]
	xor	ah, ah
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	word [currentTask], ax
	; >>>>> Line:	144
	; >>>>> runningTask = toRun; 
	mov	al, byte [bp-4]
	mov	byte [runningTask], al
	; >>>>> Line:	145
	; >>>>> YKDispatcherFirst(); 
	call	YKDispatcherFirst
	jmp	L_yakc_49
L_yakc_48:
	; >>>>> Line:	149
	; >>>>> ++YKCtxSwCount; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	150
	; >>>>> currentTask = &YKTCBArray[runningTask]; 
	mov	al, byte [runningTask]
	xor	ah, ah
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	word [currentTask], ax
	; >>>>> Line:	151
	; >>>>> runningTask = toRun; 
	mov	al, byte [bp-4]
	mov	byte [runningTask], al
	; >>>>> Line:	152
	; >>>>> if(contextSaved) 
	mov	al, byte [contextSaved]
	test	al, al
	je	L_yakc_50
	; >>>>> Line:	154
	; >>>>> contextSaved = 0; 
	mov	byte [contextSaved], 0
	; >>>>> Line:	155
	; >>>>> YKDispatcherNoSave(); 
	call	YKDispatcherNoSave
	jmp	L_yakc_51
L_yakc_50:
	; >>>>> Line:	159
	; >>>>> YKDispatcher(); 
	call	YKDispatcher
L_yakc_51:
L_yakc_49:
L_yakc_40:
	mov	sp, bp
	pop	bp
	ret
L_yakc_37:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_38
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	166
	; >>>>> { 
	jmp	L_yakc_53
L_yakc_54:
	; >>>>> Line:	167
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	169
	; >>>>> YKTCBArray[runningTask].delay = count; 
	mov	al, byte [runningTask]
	xor	ah, ah
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	170
	; >>>>> YKTCBArray[runningTask].state = DELAYED; 
	mov	al, byte [runningTask]
	xor	ah, ah
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	; >>>>> Line:	171
	; >>>>> contextSaved = 0; 
	mov	byte [contextSaved], 0
	; >>>>> Line:	172
	; >>>>> YKScheduler(); 
	call	YKScheduler
	; >>>>> Line:	174
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_53:
	push	bp
	mov	bp, sp
	jmp	L_yakc_54
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	178
	; >>>>> { 
	jmp	L_yakc_56
L_yakc_57:
	; >>>>> Line:	179
	; >>>>> ++YKInterruptDepth; 
	inc	word [YKInterruptDepth]
	mov	sp, bp
	pop	bp
	ret
L_yakc_56:
	push	bp
	mov	bp, sp
	jmp	L_yakc_57
	ALIGN	2
YKExitISR:
	; >>>>> Line:	186
	; >>>>> { 
	jmp	L_yakc_59
L_yakc_60:
	; >>>>> Line:	187
	; >>>>> --YKInterruptDepth; 
	dec	word [YKInterruptDepth]
	; >>>>> Line:	191
	; >>>>> if(YKInterruptDepth == 0 && kernelStarted && readyToStart) 
	mov	ax, word [YKInterruptDepth]
	test	ax, ax
	jne	L_yakc_61
	mov	ax, word [kernelStarted]
	test	ax, ax
	je	L_yakc_61
	mov	al, byte [readyToStart]
	test	al, al
	je	L_yakc_61
	; >>>>> Line:	193
	; >>>>> contextSaved = 1; 
	mov	byte [contextSaved], 1
	; >>>>> Line:	194
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_61:
	mov	sp, bp
	pop	bp
	ret
L_yakc_59:
	push	bp
	mov	bp, sp
	jmp	L_yakc_60
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	199
	; >>>>> { 
	jmp	L_yakc_63
L_yakc_64:
	; >>>>> Line:	201
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	202
	; >>>>> ++YKTickNum; 
	inc	word [YKTickNum]
	; >>>>> Line:	203
	; >>>>> for (i = 1; i <= 5; ++i) { 
	mov	word [bp-2], 1
	jmp	L_yakc_66
L_yakc_65:
	; >>>>> Line:	204
	; >>>>> if(YKTCBArray[i].state == DELAYED) { 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	cmp	word [si], 1
	jne	L_yakc_69
	; >>>>> Line:	205
	; >>>>> if(YKTC 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 8
	cmp	word [si], 1
	jne	L_yakc_70
	; >>>>> Line:	206
	; >>>>> YKTCBArray[i].state = READY; 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 3
L_yakc_70:
	; >>>>> Line:	208
	; >>>>> --YKTCBArray[i].delay; 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 8
	dec	word [si]
L_yakc_69:
L_yakc_68:
	inc	word [bp-2]
L_yakc_66:
	cmp	word [bp-2], 5
	jle	L_yakc_65
L_yakc_67:
	mov	sp, bp
	pop	bp
	ret
L_yakc_63:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_64
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	215
	; >>>>> { 
	jmp	L_yakc_72
L_yakc_73:
	; >>>>> Line:	216
	; >>>>> if(semIndex < 5) 
	cmp	word [semIndex], 5
	jae	L_yakc_74
	; >>>>> Line:	218
	; >>>>> YKSemArray[semIndex].value = initialValue; 
	mov	ax, word [semIndex]
	shl	ax, 1
	mov	si, ax
	add	si, YKSemArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	219
	; >>>>> semIndex = semIndex + 1; 
	mov	ax, word [semIndex]
	inc	ax
	mov	word [semIndex], ax
	; >>>>> Line:	220
	; >>>>> return &YKSemArray[semIndex-1]; 
	mov	ax, word [semIndex]
	dec	ax
	shl	ax, 1
	add	ax, YKSemArray
	jmp	L_yakc_75
L_yakc_74:
	; >>>>> Line:	222
	; >>>>> return 0; 
	xor	ax, ax
L_yakc_75:
	mov	sp, bp
	pop	bp
	ret
L_yakc_72:
	push	bp
	mov	bp, sp
	jmp	L_yakc_73
	ALIGN	2
YKSemPend:
	; >>>>> Line:	226
	; >>>>> { 
	jmp	L_yakc_77
L_yakc_78:
	; >>>>> Line:	227
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	228
	; >>>>> if(semaphore->value <= 0) 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jg	L_yakc_79
	; >>>>> Line:	230
	; >>>>> YKTCBArray[runningTask].state = SUSPENDED; 
	mov	al, byte [runningTask]
	xor	ah, ah
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 2
	; >>>>> Line:	231
	; >>>>> YKTCBArray[runningTask].semaphore = semaphore; 
	mov	al, byte [runningTask]
	xor	ah, ah
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	232
	; >>>>> semaphore->value = semaphore->value - 1; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	dec	ax
	mov	word [si], ax
	; >>>>> Line:	233
	; >>>>> <= 0) 
	mov	byte [contextSaved], 0
	; >>>>> Line:	234
	; >>>>> YKScheduler(); 
	call	YKScheduler
	jmp	L_yakc_80
L_yakc_79:
	; >>>>> Line:	238
	; >>>>> semaphore->value = semaphore->value - 1; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	dec	ax
	mov	word [si], ax
L_yakc_80:
	; >>>>> Line:	240
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_77:
	push	bp
	mov	bp, sp
	jmp	L_yakc_78
	ALIGN	2
YKSemPost:
	; >>>>> Line:	244
	; >>>>> { 
	jmp	L_yakc_82
L_yakc_83:
	; >>>>> Line:	248
	; >>>>> YKEnterMutex(); 
	mov	byte [bp-3], 100
	mov	byte [bp-4], 0
	; >>>>> Line:	248
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	249
	; >>>>> for(i = 1; i <= 5; i++) 
	mov	word [bp-2], 1
	jmp	L_yakc_85
L_yakc_84:
	; >>>>> Line:	251
	; >>>>> if(!YKTCBArray[i].inUse) 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 12
	mov	al, byte [si]
	test	al, al
	jne	L_yakc_88
	; >>>>> Line:	253
	; >>>>> break; 
	jmp	L_yakc_86
L_yakc_88:
	; >>>>> Line:	255
	; >>>>> if(YKTCBArray[i].semaphore == semaphore && YKTCBArray[i].priority < maxPriority) 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 10
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	jne	L_yakc_89
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 6
	mov	al, byte [si]
	cbw
	mov	dl, byte [bp-3]
	xor	dh, dh
	cmp	dx, ax
	jle	L_yakc_89
	; >>>>> Line:	257
	; >>>>> toRun = i; 
	mov	al, byte [bp-2]
	mov	byte [bp-4], al
	; >>>>> Line:	258
	; >>>>> maxPriority = YKTCBArray[i].priority; 
	mov	ax, word [bp-2]
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 6
	mov	al, byte [si]
	mov	byte [bp-3], al
L_yakc_89:
L_yakc_87:
	inc	word [bp-2]
L_yakc_85:
	cmp	word [bp-2], 5
	jle	L_yakc_84
L_yakc_86:
	; >>>>> Line:	261
	; >>>>> semaphore->value = semaphore->value + 1; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	inc	ax
	mov	word [si], ax
	; >>>>> Line:	262
	; >>>>> if(toRun <= 0) 
	mov	al, byte [bp-4]
	test	al, al
	jne	L_yakc_90
	; >>>>> Line:	264
	; >>>>> YKEx 
	call	YKExitMutex
	; >>>>> Line:	265
	; >>>>> return; 
	jmp	L_yakc_91
L_yakc_90:
	; >>>>> Line:	267
	; >>>>> YKTCBArray[toRun].state = READY; 
	mov	al, byte [bp-4]
	xor	ah, ah
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 3
	; >>>>> Line:	268
	; >>>>> YKTCBArray[toRun].semaphore = 0; 
	mov	al, byte [bp-4]
	xor	ah, ah
	mov	cx, 14
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	269
	; >>>>> if(YKInterruptDepth <= 0) 
	mov	ax, word [YKInterruptDepth]
	test	ax, ax
	jne	L_yakc_92
	; >>>>> Line:	271
	; >>>>> contextSaved = 0; 
	mov	byte [contextSaved], 0
	; >>>>> Line:	272
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_92:
	; >>>>> Line:	274
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_91:
	mov	sp, bp
	pop	bp
	ret
L_yakc_82:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_83
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
IdleStk:
	TIMES	512 db 0
currentTask:
	TIMES	2 db 0
nextTask:
	TIMES	2 db 0
YKTCBArray:
	TIMES	84 db 0
YKSemArray:
	TIMES	10 db 0
