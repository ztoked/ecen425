        CPU     8086
        ORG     0h
InterruptVectorTable:
        ; Internal x86 Interrupts:
        dd      0 ; Reserved (Div err)  ; Int 00h
        dd      0 ; Reserved (Step)     ; Int 01h
        dd      0 ; Reserved (NMI)      ; Int 02h
        dd      0 ; Reserved (Break)    ; Int 03h
        dd      0 ; Reserved (Overflow) ; Int 04h
        dd      0                       ; Int 05h
        dd      0                       ; Int 06h
        dd      0                       ; Int 07h
        ; Hardware Interrupts:
        dd      reset ; Reset               ; Int 08h (IRQ 0)
        dd      tick ; Tick                ; Int 09h (IRQ 1)
        dd      keyboard ; Keyboard            ; Int 0Ah (IRQ 2)
        dd      0 ; Simptris Game Over  ; Int 0Bh (IRQ 3)
        dd      0 ; Simptris New Piece  ; Int 0Ch (IRQ 4)
        dd      0 ; Simptris Received   ; Int 0Dh (IRQ 5)
        dd      0 ; Simptris Touchdown  ; Int 0Eh (IRQ 6)
        dd      0 ; Simptris Clear      ; Int 0Fh (IRQ 7)
        ; Software Interrupts:
        dd      0 ; Reserved (PC BIOS)  ; Int 10h
        dd      0                       ; Int 11h
        dd      0                       ; Int 12h
        dd      0                       ; Int 13h
        dd      0                       ; Int 14h
        dd      0                       ; Int 15h
        dd      0                       ; Int 16h
        dd      0                       ; Int 17h
        dd      0                       ; Int 18h
        dd      0                       ; Int 19h
        dd      0                       ; Int 1Ah
        dd      0                       ; Int 1Bh
        dd      0                       ; Int 1Ch
        dd      0                       ; Int 1Dh
        dd      0                       ; Int 1Eh
        dd      0                       ; Int 1Fh
        dd      0                       ; Int 20h
        dd      0 ; Reserved (DOS)      ; Int 21h
        dd      0 ; Simptris Services   ; Int 22h
        dd      0                       ; Int 23h
        dd      0                       ; Int 24h
        dd      0                       ; Int 25h
        dd      0                       ; Int 26h
        dd      0                       ; Int 27h
        dd      0                       ; Int 28h
        dd      0                       ; Int 29h
        dd      0                       ; Int 2Ah
        dd      0                       ; Int 2Bh
        dd      0                       ; Int 2Ch
        dd      0                       ; Int 2Dh
        dd      0                       ; Int 2Eh
        dd      0                       ; Int 2Fh
KeyBuffer:                              ; Address 0xC0
        dw      0
NewPieceType:                           ; Address 0xC2
        dw      0
NewPieceID:                             ; Address 0xC4
        dw      0
NewPieceOrientation:                    ; Address 0xC6
        dw      0
NewPieceColumn:                         ; Address 0xC8
        dw      0
TouchdownID:                            ; Address 0xCA
	dw	0
ScreenBitMap0:                          ; Address 0xCC
        dw      0
ScreenBitMap1:
        dw      0
ScreenBitMap2:
        dw      0
ScreenBitMap3:
        dw      0
ScreenBitMap4:
        dw      0
ScreenBitMap5:
        dw      0
TIMES   100h-($-$$) db  0               ; Fill up to (but not including) address 100h with 0
	jmp	main
; This file contains support routines for 32-bit on the 8086.
; It is intended for use code generated by the C86 compiler.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SR_asldiv:			; l1 /= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_ldiv
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmod:			; l1 %= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmod
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslmul:			; l1 *= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lmul
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshl:			; l1 <<= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshl
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_aslshr:			; l1 >>= l2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of l1	(was push3)
	push	word [bp+8]	; Push hi l2		(was push1)
	push	word [bp+6]	; Push lo l2		(was push2)
	push	word [bx+2]	; Push hi l1
	push	word [bx]	; Push lo l1
	call	SR_lshr
	add	sp,8
	mov	bx,[bp+4]	; Restore l1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


SR_asuldiv:			; u1 /= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_uldiv
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asilmod:			; u1 %= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ilmod
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulmul:			; u1 *= u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulmul
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshl:			; u1 << u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshl
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret
SR_asulshr:			; u1 >> u2
	push	bp
	mov	bp,sp
	push	bx
	mov	bx,[bp+4]	; Get address of u1	(was push3)
	push	word [bp+8]	; Push hi u2		(was push1)
	push	word [bp+6]	; Push lo u2		(was push2)
	push	word [bx+2]	; Push hi u1
	push	word [bx]	; Push lo u1
	call	SR_ulshr
	add	sp,8
	mov	bx,[bp+4]	; Restore u1 address
	mov	[bx+2],dx	; Store result
	mov	[bx],ax
	pop	bx
	pop	bp
	ret


; Main 32-bit routines begin here:

SR_ldiv:	; N_LDIV@
	pop    cx
	push   cs
	push   cx
	; LDIV@
	xor    cx,cx
	jmp    LSR_01
SR_uldiv:	; N_LUDIV@
	pop    cx
	push   cs
	push   cx
	; F_LUDIV@
	mov    cx,0001
	jmp    LSR_01
SR_lmod:	; N_LMOD@
	pop    cx
	push   cs
	push   cx
	; F_LMOD@
	mov    cx,0002
	jmp    LSR_01
SR_ilmod:	; N_LUMOD@
	pop    cx
	push   cs
	push   cx
	; LUMOD@
	mov    cx,0003
LSR_01:
	push   bp
	push   si
	push   di
	mov    bp,sp
	mov    di,cx
	mov    ax,[bp+0Ah]
	mov    dx,[bp+0Ch]
	mov    bx,[bp+0Eh]
	mov    cx,[bp+10h]
	or     cx,cx
	jne    LSR_02
	or     dx,dx
	je     LSR_10
	or     bx,bx
	je     LSR_10
LSR_02:
	test   di,0001
	jne    LSR_04
	or     dx,dx
	jns    LSR_03
	neg    dx
	neg    ax
	sbb    dx,0000
	or     di,000Ch
LSR_03:
	or     cx,cx
	jns    LSR_04
	neg    cx
	neg    bx
	sbb    cx,0000
	xor    di,0004
LSR_04:
	mov    bp,cx
	mov    cx,0020h
	push   di
	xor    di,di
	xor    si,si
LSR_05:
	shl    ax,1
	rcl    dx,1
	rcl    si,1
	rcl    di,1
	cmp    di,bp
	jb     LSR_07
	ja     LSR_06
	cmp    si,bx
	jb     LSR_07
LSR_06:
	sub    si,bx
	sbb    di,bp
	inc    ax
LSR_07:
	loop   LSR_05
	pop    bx
	test   bx,0002
	je     LSR_08
	mov    ax,si
	mov    dx,di
	shr    bx,1
LSR_08:
	test   bx,0004h
	je     LSR_09
	neg    dx
	neg    ax
	sbb    dx,0000
LSR_09:
	pop    di
	pop    si
	pop    bp
	retf   0008
LSR_10:
	div    bx
	test   di,0002
	je     LSR_11
	xchg   dx,ax
LSR_11:
	xor    dx,dx
	jmp    LSR_09
SR_lshl:	; N_LXLSH@
SR_ulshl:
	; r = a << b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

	mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXLSH@
	cmp    cl,10h
	jnb    LSR_12
	mov    bx,ax
	shl    ax,cl
	shl    dx,cl
	neg    cl
	add    cl,10h
	shr    bx,cl
	or     dx,bx
	pop    cx
	pop    bp
	retf
LSR_12:
	sub    cl,10h
	xchg   dx,ax
	xor    ax,ax
	shl    dx,cl
	pop    cx
	pop    bp
	retf
SR_lshr:	; N_LXRSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXRSH@
	cmp    cl,10h
	jnb    LSR_13
	mov    bx,dx
	shr    ax,cl
	sar    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_13:
	sub    cl,10h
	xchg   dx,ax
	cwd
	sar    ax,cl
	pop    cx
	pop    bp
	retf
SR_ulshr:	; N_LXURSH@
	; r = a >> b
	pop    bx
	push   cs
	push   bx

	push   bp
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx

        mov    ax, [bp+6]	; pop loword(a)
	mov    dx, [bp+8]	; pop hiword(a)
	mov    cx, [bp+10]	; pop word(b)
	
	; LXURSH@
	cmp    cl,10h
	jnb    LSR_14
	mov    bx,dx
	shr    ax,cl
	shr    dx,cl
	neg    cl
	add    cl,10h
	shl    bx,cl
	or     ax,bx
	pop    cx
	pop    bp
	retf
LSR_14:
	sub    cl,10h
	xchg   dx,ax
	xor    dx,dx
	shr    ax,cl
	pop    cx
	pop    bp
	retf
SR_lmul:	; N_LXMUL@
SR_ulmul:
	; r = a * b
	push   bp
	push   si
	mov    bp,sp

	push   cx	; C86 doesn't expect use of cx or bx
	push   bx

        mov    bx, [bp+6]	; pop loword(a)
	mov    cx, [bp+8]	; pop hiword(a)
	mov    ax, [bp+10]	; pop loword(b)
	mov    dx, [bp+12]	; pop hiword(b)
	
	xchg   si,ax
	xchg   dx,ax
	test   ax,ax
	je     LSR_15
	mul    bx
LSR_15:
	jcxz   LSR_16
	xchg   cx,ax
	mul    si
	add    ax,cx
LSR_16:
	xchg   si,ax
	mul    bx
	add    dx,si
	pop    bx
	pop    cx
	pop    si
	pop    bp
	ret

; Generated by c86 (BYU-NASM) 5.1 (beta) from clib.c
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
new_line:
	db	13,10,36
	ALIGN	2
signalEOI:
	jmp	L_clib_1
L_clib_2:
	mov	al, 0x20
	out	0x20, al
	mov	sp, bp
	pop	bp
	ret
L_clib_1:
	push	bp
	mov	bp, sp
	jmp	L_clib_2
	ALIGN	2
exit:
	jmp	L_clib_4
L_clib_5:
	mov	ah, 4Ch
	mov	al, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_4:
	push	bp
	mov	bp, sp
	jmp	L_clib_5
	ALIGN	2
print:
	jmp	L_clib_7
L_clib_8:
	mov	ah, 40h
	mov	bx, 1
	mov	cx, [bp+6]
	mov	dx, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_7:
	push	bp
	mov	bp, sp
	jmp	L_clib_8
	ALIGN	2
printChar:
	jmp	L_clib_10
L_clib_11:
	mov	ah, 2
	mov	dl, [bp+4]
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_10:
	push	bp
	mov	bp, sp
	jmp	L_clib_11
	ALIGN	2
printNewLine:
	jmp	L_clib_13
L_clib_14:
	mov	ah, 9
	mov	dx, new_line
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_13:
	push	bp
	mov	bp, sp
	jmp	L_clib_14
	ALIGN	2
printString:
	jmp	L_clib_16
L_clib_17:
	xor	si,si
	mov	bx, [bp+4]
	jmp	printString2
	printString1:
	inc	si
	printString2:
	cmp	byte [bx+si],0
	jne	printString1
	mov	dx, bx
	mov	cx, si
	mov	ah, 40h
	mov	bx, 1
	int	21h
	mov	sp, bp
	pop	bp
	ret
L_clib_16:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_clib_17
	ALIGN	2
printInt:
	jmp	L_clib_19
L_clib_20:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	cmp	word [bp+4], 0
	jge	L_clib_21
	mov	byte [bp-10], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	neg	ax
	mov	word [bp+4], ax
L_clib_21:
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_22
	mov	word [bp-4], 1
	jmp	L_clib_23
L_clib_22:
	jmp	L_clib_25
L_clib_24:
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
L_clib_25:
	mov	ax, word [bp+4]
	cwd
	idiv	word [bp-4]
	test	ax, ax
	je	L_clib_24
L_clib_26:
L_clib_23:
	jmp	L_clib_28
L_clib_27:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	ax, dx
	mov	word [bp+4], ax
	mov	ax, word [bp-4]
	cwd
	mov	cx, 10
	idiv	cx
	mov	word [bp-4], ax
	mov	ax, word [bp-4]
	mov	word [bp-4], ax
L_clib_28:
	cmp	word [bp-4], 0
	jg	L_clib_27
L_clib_29:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_19:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_20
	ALIGN	2
printLong:
	jmp	L_clib_31
L_clib_32:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	cmp	word [bp+6], 0
	jg	L_clib_33
	jl	L_clib_34
	cmp	word [bp+4], 0
	jae	L_clib_33
L_clib_34:
	mov	byte [bp-17], 45
	inc	word [bp-2]
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	neg	ax
	adc	dx, 0
	neg	dx
	mov	word [bp+4], ax
	mov	word [bp+6], dx
L_clib_33:
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_35
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_36
L_clib_35:
	jmp	L_clib_38
L_clib_37:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_38:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_ldiv
	or	dx, ax
	je	L_clib_37
L_clib_39:
L_clib_36:
	jmp	L_clib_41
L_clib_40:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_lmod
	mov	word [bp+4], ax
	mov	word [bp+6], dx
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asldiv
L_clib_41:
	cmp	word [bp-4], 0
	jg	L_clib_40
	jne	L_clib_43
	cmp	word [bp-6], 0
	ja	L_clib_40
L_clib_43:
L_clib_42:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_31:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_32
	ALIGN	2
printUInt:
	jmp	L_clib_45
L_clib_46:
	mov	word [bp-2], 0
	mov	word [bp-4], 10000
	mov	ax, word [bp+4]
	test	ax, ax
	jne	L_clib_47
	mov	word [bp-4], 1
	jmp	L_clib_48
L_clib_47:
	jmp	L_clib_50
L_clib_49:
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_50:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	test	ax, ax
	je	L_clib_49
L_clib_51:
L_clib_48:
	jmp	L_clib_53
L_clib_52:
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-10]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	mov	ax, word [bp+4]
	xor	dx, dx
	div	word [bp-4]
	mov	word [bp+4], dx
	mov	ax, word [bp-4]
	xor	dx, dx
	mov	cx, 10
	div	cx
	mov	word [bp-4], ax
L_clib_53:
	mov	ax, word [bp-4]
	test	ax, ax
	jne	L_clib_52
L_clib_54:
	push	word [bp-2]
	lea	ax, [bp-10]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_45:
	push	bp
	mov	bp, sp
	sub	sp, 10
	jmp	L_clib_46
	ALIGN	2
printULong:
	jmp	L_clib_56
L_clib_57:
	mov	word [bp-2], 0
	mov	word [bp-6], 51712
	mov	word [bp-4], 15258
	mov	ax, word [bp+4]
	mov	dx, word [bp+6]
	or	dx, ax
	jne	L_clib_58
	mov	word [bp-6], 1
	mov	word [bp-4], 0
	jmp	L_clib_59
L_clib_58:
	jmp	L_clib_61
L_clib_60:
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_61:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	or	dx, ax
	je	L_clib_60
L_clib_62:
L_clib_59:
	jmp	L_clib_64
L_clib_63:
	push	word [bp-4]
	push	word [bp-6]
	push	word [bp+6]
	push	word [bp+4]
	call	SR_uldiv
	add	al, 48
	mov	si, word [bp-2]
	lea	dx, [bp-17]
	add	si, dx
	mov	byte [si], al
	inc	word [bp-2]
	push	word [bp-4]
	push	word [bp-6]
	lea	ax, [bp+4]
	push	ax
	call	SR_asilmod
	mov	ax, 10
	xor	dx, dx
	push	dx
	push	ax
	lea	ax, [bp-6]
	push	ax
	call	SR_asuldiv
L_clib_64:
	mov	ax, word [bp-6]
	mov	dx, word [bp-4]
	or	dx, ax
	jne	L_clib_63
L_clib_65:
	push	word [bp-2]
	lea	ax, [bp-17]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_56:
	push	bp
	mov	bp, sp
	sub	sp, 18
	jmp	L_clib_57
	ALIGN	2
printByte:
	jmp	L_clib_67
L_clib_68:
	mov	al, byte [bp+4]
	cbw
	mov	cx, 4
	sar	ax, cl
	and	ax, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_69
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_70
L_clib_69:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_70:
	mov	byte [bp-3], al
	mov	al, byte [bp+4]
	and	al, 15
	mov	byte [bp-1], al
	cmp	byte [bp-1], 9
	jle	L_clib_71
	mov	al, byte [bp-1]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_72
L_clib_71:
	mov	al, byte [bp-1]
	cbw
	add	ax, 48
L_clib_72:
	mov	byte [bp-2], al
	mov	ax, 2
	push	ax
	lea	ax, [bp-3]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_67:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_clib_68
	ALIGN	2
printWord:
	jmp	L_clib_74
L_clib_75:
	mov	word [bp-2], 3
	jmp	L_clib_77
L_clib_76:
	mov	ax, word [bp+4]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_80
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_81
L_clib_80:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_81:
	mov	si, word [bp-2]
	lea	dx, [bp-7]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp+4]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp+4], ax
L_clib_79:
	dec	word [bp-2]
L_clib_77:
	cmp	word [bp-2], 0
	jge	L_clib_76
L_clib_78:
	mov	ax, 4
	push	ax
	lea	ax, [bp-7]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_74:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_clib_75
	ALIGN	2
printDWord:
	jmp	L_clib_83
L_clib_84:
	lea	ax, [bp+4]
	mov	si, ax
	mov	ax, word [si]
	mov	word [bp-6], ax
	lea	ax, [bp+4]
	mov	si, ax
	add	si, 2
	mov	ax, word [si]
	mov	word [bp-8], ax
	mov	word [bp-2], 3
	jmp	L_clib_86
L_clib_85:
	mov	ax, word [bp-6]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_89
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_90
L_clib_89:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_90:
	mov	dx, word [bp-2]
	add	dx, 4
	mov	si, dx
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-6]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-6], ax
	mov	ax, word [bp-8]
	and	ax, 15
	mov	byte [bp-3], al
	cmp	byte [bp-3], 9
	jle	L_clib_91
	mov	al, byte [bp-3]
	cbw
	sub	ax, 10
	add	ax, 65
	jmp	L_clib_92
L_clib_91:
	mov	al, byte [bp-3]
	cbw
	add	ax, 48
L_clib_92:
	mov	si, word [bp-2]
	lea	dx, [bp-16]
	add	si, dx
	mov	byte [si], al
	mov	ax, word [bp-8]
	mov	cx, 4
	sar	ax, cl
	mov	word [bp-8], ax
L_clib_88:
	dec	word [bp-2]
L_clib_86:
	cmp	word [bp-2], 0
	jge	L_clib_85
L_clib_87:
	mov	ax, 8
	push	ax
	lea	ax, [bp-16]
	push	ax
	call	print
	add	sp, 4
	mov	sp, bp
	pop	bp
	ret
L_clib_83:
	push	bp
	mov	bp, sp
	sub	sp, 16
	jmp	L_clib_84

reset:
	;Step 1
	push ax
	push bx
	push cx
	push dx
	push bp
	mov bp, sp

	;Step 2
	sti

	;Step 3
	mov ax, 0
	push ax
	call exit

	;Step 4
	cli

	;Step 5
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)

	;Step 6
	pop bp
	pop dx
	pop cx
	pop bx
	pop ax

	;Step 7
	iret

tick:
	;Step 1
	push 	bp
	push 	ax
	push 	bx
	push 	cx
	push 	dx
	push 	si
	push 	di
	push 	es
	push 	ds
	;mov bp, sp
	;call pushed

	call YKEnterISR
	;Step 2
	sti

	;Step 3	mov bp, sp
	call YKTickHandler
	call tickHandler


	;Step 4
	cli

	;Step 5
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)

	call YKExitISR

	;Step 6
	pop		ds
	pop 	es
	pop 	di
	pop 	si
 	pop 	dx
	pop 	cx
  pop 	bx
  pop 	ax
	pop 	bp
	;call popped
	iret

keyboard:
	;Step 1
	push 	bp
	push 	ax
	push 	bx
	push 	cx
	push 	dx
	push 	si
	push 	di
	push 	es
	push 	ds
	;mov bp, sp
	;call pushed

	call YKEnterISR
	;Step 2

	sti
	;Step 3
	call keyboardHandler

	;Step 4
	cli

	;Step 5
	mov	al, 0x20	; Load nonspecific EOI value (0x20) into register al
	out	0x20, al	; Write EOI to PIC (port 0x20)

	call YKExitISR

	;Step 6
	pop		ds
	pop 	es
	pop 	di
	pop 	si
 	pop 	dx
	pop 	cx
  pop 	bx
  pop 	ax
	pop 	bp
	;call popped
	;Step 7
	iret
; Generated by c86 (BYU-NASM) 5.1 (beta) from myinth.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
tickHandler:
	; >>>>> Line:	11
	; >>>>> { 
	jmp	L_myinth_1
L_myinth_2:
	; >>>>> Line:	13
	; >>>>> } 
	mov	sp, bp
	pop	bp
	ret
L_myinth_1:
	push	bp
	mov	bp, sp
	jmp	L_myinth_2
L_myinth_5:
	DB	") IGNORED",0xA,0
L_myinth_4:
	DB	0xA,"KEYPRESS (",0
	ALIGN	2
keyboardHandler:
	; >>>>> Line:	16
	; >>>>> { 
	jmp	L_myinth_6
L_myinth_7:
	; >>>>> Line:	18
	; >>>>> c = KeyBuffer; 
	mov	al, byte [KeyBuffer]
	mov	byte [bp-1], al
	; >>>>> Line:	20
	; >>>>> if(c == 'a') YKEventSet(charEvent, 0x1); 
	cmp	byte [bp-1], 97
	jne	L_myinth_8
	; >>>>> Line:	20
	; >>>>> if(c == 'a') YKEventSet(charEvent, 0x1); 
	mov	ax, 1
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_9
L_myinth_8:
	; >>>>> Line:	21
	; >>>>> else if(c == 'b') YKEventSet(charEvent, 0x2); 
	cmp	byte [bp-1], 98
	jne	L_myinth_10
	; >>>>> Line:	21
	; >>>>> else if(c == 'b') YKEventSet(charEvent, 0x2); 
	mov	ax, 2
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_11
L_myinth_10:
	; >>>>> Line:	22
	; >>>>> else if(c == 'c') YKEventSet(charEvent, 0x4); 
	cmp	byte [bp-1], 99
	jne	L_myinth_12
	; >>>>> Line:	22
	; >>>>> else if(c == 'c') YKEventSet(charEvent, 0x4); 
	mov	ax, 4
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_13
L_myinth_12:
	; >>>>> Line:	23
	; >>>>> else if(c == 'd') YKEventSet(charEvent, 0x1 | 0x2 | 0x4); 
	cmp	byte [bp-1], 100
	jne	L_myinth_14
	; >>>>> Line:	23
	; >>>>> else if(c == 'd') YKEventSet(charEvent, 0x1 | 0x2 | 0x4); 
	mov	ax, 7
	push	ax
	push	word [charEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_15
L_myinth_14:
	; >>>>> Line:	24
	; >>>>> else if(c == '1') YKEventSet(numEvent, 0x1); 
	cmp	byte [bp-1], 49
	jne	L_myinth_16
	; >>>>> Line:	24
	; >>>>> else if(c == '1') YKEventSet(numEvent, 0x1); 
	mov	ax, 1
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_17
L_myinth_16:
	; >>>>> Line:	25
	; >>>>> else if(c == '2') YKEventSet(numEvent, 0x2); 
	cmp	byte [bp-1], 50
	jne	L_myinth_18
	; >>>>> Line:	25
	; >>>>> else if(c == '2') YKEventSet(numEvent, 0x2); 
	mov	ax, 2
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_19
L_myinth_18:
	; >>>>> Line:	26
	; >>>>> else if(c == '3') YKEventSet(numEvent, 0x4); 
	cmp	byte [bp-1], 51
	jne	L_myinth_20
	; >>>>> Line:	26
	; >>>>> else if(c == '3') YKEventSet(numEvent, 0x4); 
	mov	ax, 4
	push	ax
	push	word [numEvent]
	call	YKEventSet
	add	sp, 4
	jmp	L_myinth_21
L_myinth_20:
	; >>>>> Line:	28
	; >>>>> print("\nKEYPRESS (", 11); 
	mov	ax, 11
	push	ax
	mov	ax, L_myinth_4
	push	ax
	call	print
	add	sp, 4
	; >>>>> Line:	29
	; >>>>> printChar(c); 
	push	word [bp-1]
	call	printChar
	add	sp, 2
	; >>>>> Line:	30
	; >>>>> print(") IGNORED\n", 10); 
	mov	ax, 10
	push	ax
	mov	ax, L_myinth_5
	push	ax
	call	print
	add	sp, 4
L_myinth_21:
L_myinth_19:
L_myinth_17:
L_myinth_15:
L_myinth_13:
L_myinth_11:
L_myinth_9:
	mov	sp, bp
	pop	bp
	ret
L_myinth_6:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_myinth_7
; Generated by c86 (BYU-NASM) 5.1 (beta) from yakc.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
	ALIGN	2
FLAGS_MASK:
	DW	512
YKInterruptDepth:
	DW	0
kernelStarted:
	DW	0
readyToStart:
	DB	0
runningTask:
	DB	0
firstTime:
	DB	1
	ALIGN	2
pushedLevel:
	DW	0
contextSaved:
	DB	0
	ALIGN	2
semIndex:
	DW	0
qIndex:
	DW	0
eventIndex:
	DW	0
	ALIGN	2
YKInitialize:
	; >>>>> Line:	39
	; >>>>> { 
	jmp	L_yakc_1
L_yakc_2:
	; >>>>> Line:	41
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	43
	; >>>>> for (i = 0; i < 5; ++i) 
	mov	word [bp-2], 0
	jmp	L_yakc_4
L_yakc_3:
	; >>>>> Line:	45
	; >>>>> YKTCBArray[i].priority = 100; 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 6
	mov	byte [si], 100
	; >>>>> Line:	46
	; >>>>> YKTCBArray[i].inUse = 0; 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 12
	mov	byte [si], 0
L_yakc_6:
	inc	word [bp-2]
L_yakc_4:
	cmp	word [bp-2], 5
	jl	L_yakc_3
L_yakc_5:
	; >>>>> Line:	49
	; >>>>> YKNewTask(YKIdleTask, (void *)&IdleStk[256], 99); 
	mov	al, 99
	push	ax
	mov	ax, (IdleStk+512)
	push	ax
	mov	ax, YKIdleTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	50
	; >>>>> r 
	mov	byte [readyToStart], 0
	mov	sp, bp
	pop	bp
	ret
L_yakc_1:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_2
L_yakc_8:
	DB	"Pushed: ",0
	ALIGN	2
pushed:
	; >>>>> Line:	53
	; >>>>> { 
	jmp	L_yakc_9
L_yakc_10:
	; >>>>> Line:	54
	; >>>>> pushedLevel = pushedLevel + 1; 
	mov	ax, word [pushedLevel]
	inc	ax
	mov	word [pushedLevel], ax
	; >>>>> Line:	55
	; >>>>> printString("Pushed: "); 
	mov	ax, L_yakc_8
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	56
	; >>>>> printInt(pushedLevel); 
	push	word [pushedLevel]
	call	printInt
	add	sp, 2
	; >>>>> Line:	57
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_yakc_9:
	push	bp
	mov	bp, sp
	jmp	L_yakc_10
L_yakc_12:
	DB	"Popped: ",0
	ALIGN	2
popped:
	; >>>>> Line:	61
	; >>>>> { 
	jmp	L_yakc_13
L_yakc_14:
	; >>>>> Line:	62
	; >>>>> pushedLevel = pushedLevel - 1; 
	mov	ax, word [pushedLevel]
	dec	ax
	mov	word [pushedLevel], ax
	; >>>>> Line:	63
	; >>>>> printString("Popped: "); 
	mov	ax, L_yakc_12
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	64
	; >>>>> printInt(pushedLevel); 
	push	word [pushedLevel]
	call	printInt
	add	sp, 2
	; >>>>> Line:	65
	; >>>>> printNewLine(); 
	call	printNewLine
	mov	sp, bp
	pop	bp
	ret
L_yakc_13:
	push	bp
	mov	bp, sp
	jmp	L_yakc_14
	ALIGN	2
YKIdleTask:
	; >>>>> Line:	69
	; >>>>> { 
	jmp	L_yakc_16
L_yakc_17:
	; >>>>> Line:	70
	; >>>>> while(1) 
	jmp	L_yakc_19
L_yakc_18:
	; >>>>> Line:	72
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	73
	; >>>>> ++YKIdleCount; 
	inc	word [YKIdleCount]
	; >>>>> Line:	74
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_19:
	jmp	L_yakc_18
L_yakc_20:
	mov	sp, bp
	pop	bp
	ret
L_yakc_16:
	push	bp
	mov	bp, sp
	jmp	L_yakc_17
	ALIGN	2
YKNewTask:
	; >>>>> Line:	79
	; >>>>> { 
	jmp	L_yakc_22
L_yakc_23:
	; >>>>> Line:	81
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	83
	; >>>>> for (i = 0; i <= 5; ++i) 
	mov	word [bp-2], 0
	jmp	L_yakc_25
L_yakc_24:
	; >>>>> Line:	85
	; >>>>> if (!YKTCBArray[i].inUse) 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 12
	mov	al, byte [si]
	test	al, al
	jne	L_yakc_28
	; >>>>> Line:	86
	; >>>>> nte 
	jmp	L_yakc_26
L_yakc_28:
L_yakc_27:
	inc	word [bp-2]
L_yakc_25:
	cmp	word [bp-2], 5
	jle	L_yakc_24
L_yakc_26:
	; >>>>> Line:	89
	; >>>>> YKTCBArray[i].ip = (unsigned int) task; 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	mov	si, ax
	add	si, YKTCBArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	90
	; >>>>> YKTCBArray[i].stackptr = taskStack; 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	91
	; >>>>> YKTCBArray[i].state = READY; 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 3
	; >>>>> Line:	92
	; >>>>> YKTCBArray[i].delay = 0; 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 8
	mov	word [si], 0
	; >>>>> Line:	93
	; >>>>> YKTCBArray[i].inUse = 1; 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 12
	mov	byte [si], 1
	; >>>>> Line:	94
	; >>>>> YKTCBArray[i].priority = priority; 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 6
	mov	al, byte [bp+8]
	mov	byte [si], al
	; >>>>> Line:	95
	; >>>>> YKCreateContext(YKTCBArray[i].stackptr, YKTCBArray[i].ip); 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	mov	si, ax
	add	si, YKTCBArray
	push	word [si]
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 2
	push	word [si]
	call	YKCreateContext
	add	sp, 4
	; >>>>> Line:	96
	; >>>>> YKTCBArray[i].stackptr += 24; 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 2
	add	word [si], -24
	; >>>>> Line:	97
	; >>>>> readyToStart = 1; 
	mov	byte [readyToStart], 1
	; >>>>> Line:	99
	; >>>>> if(kernelStarted) 
	mov	ax, word [kernelStarted]
	test	ax, ax
	je	L_yakc_29
	; >>>>> Line:	101
	; >>>>> currentTask = &YKTCBArray[i]; 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	word [currentTask], ax
	; >>>>> Line:	102
	; >>>>> contextSaved = 0; 
	mov	byte [contextSaved], 0
	; >>>>> Line:	103
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_29:
	mov	sp, bp
	pop	bp
	ret
L_yakc_22:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_23
	ALIGN	2
YKRun:
	; >>>>> Line:	109
	; >>>>> { 
	jmp	L_yakc_31
L_yakc_32:
	; >>>>> Line:	110
	; >>>>> if (kernelStarted || !readyToStart) 
	mov	ax, word [kernelStarted]
	test	ax, ax
	jne	L_yakc_34
	mov	al, byte [readyToStart]
	test	al, al
	jne	L_yakc_33
L_yakc_34:
	; >>>>> Line:	111
	; >>>>> return; 
	jmp	L_yakc_35
L_yakc_33:
	; >>>>> Line:	114
	; >>>>> kernelStarted = 1; 
	mov	word [kernelStarted], 1
	; >>>>> Line:	116
	; >>>>> ) { 
	mov	byte [contextSaved], 0
	; >>>>> Line:	117
	; >>>>> YKScheduler(); 
	call	YKScheduler
	; >>>>> Line:	118
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_35:
	mov	sp, bp
	pop	bp
	ret
L_yakc_31:
	push	bp
	mov	bp, sp
	jmp	L_yakc_32
	ALIGN	2
YKScheduler:
	; >>>>> Line:	122
	; >>>>> { 
	jmp	L_yakc_37
L_yakc_38:
	; >>>>> Line:	127
	; >>>>> if (!kernelStarted) return; 
	mov	byte [bp-3], 100
	mov	byte [bp-4], 0
	; >>>>> Line:	127
	; >>>>> if (!kernelStarted) return; 
	mov	ax, word [kernelStarted]
	test	ax, ax
	jne	L_yakc_39
	; >>>>> Line:	127
	; >>>>> if (!kernelStarted) return; 
	jmp	L_yakc_40
L_yakc_39:
	; >>>>> Line:	129
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	131
	; >>>>> for (i = 0; i <= 5; ++i) 
	mov	word [bp-2], 0
	jmp	L_yakc_42
L_yakc_41:
	; >>>>> Line:	133
	; >>>>> if (!YKTCBArray[i].inUse) 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 12
	mov	al, byte [si]
	test	al, al
	jne	L_yakc_45
	; >>>>> Line:	134
	; >>>>> break; 
	jmp	L_yakc_43
L_yakc_45:
	; >>>>> Line:	135
	; >>>>> if (YKTCBArray[i].priority < maxPriority && YKTCBArray[i].state == READY) 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 6
	mov	al, byte [si]
	cbw
	mov	dl, byte [bp-3]
	xor	dh, dh
	cmp	dx, ax
	jle	L_yakc_46
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	cmp	word [si], 3
	jne	L_yakc_46
	; >>>>> Line:	137
	; >>>>> maxPriority = YKTCBArray[i].priority; 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 6
	mov	al, byte [si]
	mov	byte [bp-3], al
	; >>>>> Line:	138
	; >>>>> toRun = i; 
	mov	al, byte [bp-2]
	mov	byte [bp-4], al
L_yakc_46:
L_yakc_44:
	inc	word [bp-2]
L_yakc_42:
	cmp	word [bp-2], 5
	jle	L_yakc_41
L_yakc_43:
	; >>>>> Line:	141
	; >>>>> nextTask = &YKTCBArray[toRun]; 
	mov	al, byte [bp-4]
	xor	ah, ah
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	word [nextTask], ax
	; >>>>> Line:	143
	; >>>>> if (runningTask == toRun && !firstTime) 
	mov	al, byte [bp-4]
	cmp	al, byte [runningTask]
	jne	L_yakc_47
	mov	al, byte [firstTime]
	test	al, al
	jne	L_yakc_47
	; >>>>> Line:	146
	; >>>>> return; 
	jmp	L_yakc_40
L_yakc_47:
	; >>>>> Line:	148
	; >>>>> if(firstTime) { 
	mov	al, byte [firstTime]
	test	al, al
	je	L_yakc_48
	; >>>>> Line:	149
	; >>>>> erISR() 
	mov	byte [firstTime], 0
	; >>>>> Line:	150
	; >>>>> currentTask = &YKTCBArray[toRun]; 
	mov	al, byte [bp-4]
	xor	ah, ah
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	word [currentTask], ax
	; >>>>> Line:	151
	; >>>>> runningTask = toRun; 
	mov	al, byte [bp-4]
	mov	byte [runningTask], al
	; >>>>> Line:	152
	; >>>>> YKDispatcherFirst(); 
	call	YKDispatcherFirst
	jmp	L_yakc_49
L_yakc_48:
	; >>>>> Line:	156
	; >>>>> ++YKCtxSwCount; 
	inc	word [YKCtxSwCount]
	; >>>>> Line:	157
	; >>>>> currentTask = &YKTCBArray[runningTask]; 
	mov	al, byte [runningTask]
	xor	ah, ah
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	word [currentTask], ax
	; >>>>> Line:	158
	; >>>>> runningTask = toRun; 
	mov	al, byte [bp-4]
	mov	byte [runningTask], al
	; >>>>> Line:	159
	; >>>>> if(contextSaved) 
	mov	al, byte [contextSaved]
	test	al, al
	je	L_yakc_50
	; >>>>> Line:	161
	; >>>>> contextSaved = 0; 
	mov	byte [contextSaved], 0
	; >>>>> Line:	162
	; >>>>> YKDispatcherNoSave(); 
	call	YKDispatcherNoSave
	jmp	L_yakc_51
L_yakc_50:
	; >>>>> Line:	166
	; >>>>> YKDispatcher(); 
	call	YKDispatcher
L_yakc_51:
L_yakc_49:
L_yakc_40:
	mov	sp, bp
	pop	bp
	ret
L_yakc_37:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_38
	ALIGN	2
YKDelayTask:
	; >>>>> Line:	173
	; >>>>> { 
	jmp	L_yakc_53
L_yakc_54:
	; >>>>> Line:	174
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	176
	; >>>>> YKTCBArray[runningTask].delay = count; 
	mov	al, byte [runningTask]
	xor	ah, ah
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 8
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	177
	; >>>>> YKTCBArray[runningTask].state = DELAYED; 
	mov	al, byte [runningTask]
	xor	ah, ah
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 1
	; >>>>> Line:	178
	; >>>>> contextSaved = 0; 
	mov	byte [contextSaved], 0
	; >>>>> Line:	179
	; >>>>> YKScheduler(); 
	call	YKScheduler
	; >>>>> Line:	181
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_53:
	push	bp
	mov	bp, sp
	jmp	L_yakc_54
	ALIGN	2
YKEnterISR:
	; >>>>> Line:	185
	; >>>>> { 
	jmp	L_yakc_56
L_yakc_57:
	; >>>>> Line:	186
	; >>>>> ++YKInterruptDepth; 
	inc	word [YKInterruptDepth]
	mov	sp, bp
	pop	bp
	ret
L_yakc_56:
	push	bp
	mov	bp, sp
	jmp	L_yakc_57
	ALIGN	2
YKExitISR:
	; >>>>> Line:	193
	; >>>>> { 
	jmp	L_yakc_59
L_yakc_60:
	; >>>>> Line:	194
	; >>>>> --YKInterruptDepth; 
	dec	word [YKInterruptDepth]
	; >>>>> Line:	198
	; >>>>> if(YKInterruptDepth == 0 && kernelStarted && readyToStart) 
	mov	ax, word [YKInterruptDepth]
	test	ax, ax
	jne	L_yakc_61
	mov	ax, word [kernelStarted]
	test	ax, ax
	je	L_yakc_61
	mov	al, byte [readyToStart]
	test	al, al
	je	L_yakc_61
	; >>>>> Line:	200
	; >>>>> contextSaved = 1; 
	mov	byte [contextSaved], 1
	; >>>>> Line:	201
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_61:
	mov	sp, bp
	pop	bp
	ret
L_yakc_59:
	push	bp
	mov	bp, sp
	jmp	L_yakc_60
	ALIGN	2
YKTickHandler:
	; >>>>> Line:	206
	; >>>>> { 
	jmp	L_yakc_63
L_yakc_64:
	; >>>>> Line:	208
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	209
	; >>>>> ++YKTickNum; 
	inc	word [YKTickNum]
	; >>>>> Line:	210
	; >>>>> for (i = 1; i <= 5; ++i) { 
	mov	word [bp-2], 1
	jmp	L_yakc_66
L_yakc_65:
	; >>>>> Line:	211
	; >>>>> if(YKTCBArray[i].state == DELAYED) { 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	cmp	word [si], 1
	jne	L_yakc_69
	; >>>>> Line:	212
	; >>>>> if(YKTCBArray[i].delay == 1) { 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 8
	cmp	word [si], 1
	jne	L_yakc_70
	; >>>>> Line:	213
	; >>>>> YKTCBArray[i].state = READY; 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 3
L_yakc_70:
	; >>>>> Line:	215
	; >>>>> --YKTCBArray[i].delay; 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 8
	dec	word [si]
L_yakc_69:
L_yakc_68:
	inc	word [bp-2]
L_yakc_66:
	cmp	word [bp-2], 5
	jle	L_yakc_65
L_yakc_67:
	mov	sp, bp
	pop	bp
	ret
L_yakc_63:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_64
	ALIGN	2
YKSemCreate:
	; >>>>> Line:	225
	; >>>>> { 
	jmp	L_yakc_72
L_yakc_73:
	; >>>>> Line:	226
	; >>>>> if(semIndex < (5 + 5 + 5)) 
	cmp	word [semIndex], 15
	jae	L_yakc_74
	; >>>>> Line:	228
	; >>>>> YKSemArray[semIndex] 
	mov	ax, word [semIndex]
	shl	ax, 1
	mov	si, ax
	add	si, YKSemArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	229
	; >>>>> semIndex = semIndex + 1; 
	mov	ax, word [semIndex]
	inc	ax
	mov	word [semIndex], ax
	; >>>>> Line:	230
	; >>>>> return &YKSemArray[semIndex-1]; 
	mov	ax, word [semIndex]
	dec	ax
	shl	ax, 1
	add	ax, YKSemArray
	jmp	L_yakc_75
L_yakc_74:
	; >>>>> Line:	232
	; >>>>> return 0; 
	xor	ax, ax
L_yakc_75:
	mov	sp, bp
	pop	bp
	ret
L_yakc_72:
	push	bp
	mov	bp, sp
	jmp	L_yakc_73
	ALIGN	2
YKSemPend:
	; >>>>> Line:	236
	; >>>>> { 
	jmp	L_yakc_77
L_yakc_78:
	; >>>>> Line:	237
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	238
	; >>>>> if(semaphore->value <= 0) 
	mov	si, word [bp+4]
	cmp	word [si], 0
	jg	L_yakc_79
	; >>>>> Line:	240
	; >>>>> YKTCBArray[runningTask].state = SUSPENDED; 
	mov	al, byte [runningTask]
	xor	ah, ah
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 2
	; >>>>> Line:	241
	; >>>>> YKTCBArray[runningTask].semaphore = semaphore; 
	mov	al, byte [runningTask]
	xor	ah, ah
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 10
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	242
	; >>>>> semaphore->value = semaphore->value - 1; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	dec	ax
	mov	word [si], ax
	; >>>>> Line:	243
	; >>>>> contextSaved = 0; 
	mov	byte [contextSaved], 0
	; >>>>> Line:	244
	; >>>>> YKScheduler(); 
	call	YKScheduler
	jmp	L_yakc_80
L_yakc_79:
	; >>>>> Line:	248
	; >>>>> semaphore->value = semaphore->value - 1; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	dec	ax
	mov	word [si], ax
L_yakc_80:
	; >>>>> Line:	250
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	mov	sp, bp
	pop	bp
	ret
L_yakc_77:
	push	bp
	mov	bp, sp
	jmp	L_yakc_78
	ALIGN	2
YKSemPost:
	; >>>>> Line:	254
	; >>>>> { 
	jmp	L_yakc_82
L_yakc_83:
	; >>>>> Line:	258
	; >>>>> YKEnterMutex(); 
	mov	byte [bp-3], 100
	mov	byte [bp-4], 0
	; >>>>> Line:	258
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	259
	; >>>>> for(i = 1; i <= 5; i++) 
	mov	word [bp-2], 1
	jmp	L_yakc_85
L_yakc_84:
	; >>>>> Line:	261
	; >>>>> if(!YKTCBArray[i].inUse) 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 12
	mov	al, byte [si]
	test	al, al
	jne	L_yakc_88
	; >>>>> Line:	263
	; >>>>> break; 
	jmp	L_yakc_86
L_yakc_88:
	; >>>>> Line:	265
	; >>>>> if(YKTCBArray[i].semaphore == semaphore && YKTCBArray[i].priority < maxPriority) 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 10
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	jne	L_yakc_89
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 6
	mov	al, byte [si]
	cbw
	mov	dl, byte [bp-3]
	xor	dh, dh
	cmp	dx, ax
	jle	L_yakc_89
	; >>>>> Line:	267
	; >>>>> toRun = i; 
	mov	al, byte [bp-2]
	mov	byte [bp-4], al
	; >>>>> Line:	268
	; >>>>> maxPriority = YKTCBArray[i].priority; 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 6
	mov	al, byte [si]
	mov	byte [bp-3], al
L_yakc_89:
L_yakc_87:
	inc	word [bp-2]
L_yakc_85:
	cmp	word [bp-2], 5
	jle	L_yakc_84
L_yakc_86:
	; >>>>> Line:	271
	; >>>>> semaphore->value = semaphore->value + 1; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	inc	ax
	mov	word [si], ax
	; >>>>> Line:	272
	; >>>>> if(toRun <= 0) 
	mov	al, byte [bp-4]
	test	al, al
	jne	L_yakc_90
	; >>>>> Line:	274
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	275
	; >>>>> return; 
	jmp	L_yakc_91
L_yakc_90:
	; >>>>> Line:	277
	; >>>>> YKTCBArray[toRun].state = READY; 
	mov	al, byte [bp-4]
	xor	ah, ah
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 3
	; >>>>> Line:	278
	; >>>>> YKTCBArray[toRun].semaphore = 0; 
	mov	al, byte [bp-4]
	xor	ah, ah
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 10
	mov	word [si], 0
	; >>>>> Line:	279
	; >>>>> if(YKInterruptDepth <= 0) 
	mov	ax, word [YKInterruptDepth]
	test	ax, ax
	jne	L_yakc_92
	; >>>>> Line:	281
	; >>>>> contextSaved = 0; 
	mov	byte [contextSaved], 0
	; >>>>> Line:	282
	; >>>>> YKScheduler(); 
	call	YKScheduler
L_yakc_92:
	; >>>>> Line:	284
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_yakc_91:
	mov	sp, bp
	pop	bp
	ret
L_yakc_82:
	push	bp
	mov	bp, sp
	sub	sp, 4
	jmp	L_yakc_83
	ALIGN	2
YKQCreate:
	; >>>>> Line:	293
	; >>>>> { 
	jmp	L_yakc_94
L_yakc_95:
	; >>>>> Line:	294
	; >>>>> if(qIndex < 5) 
	cmp	word [qIndex], 5
	jae	L_yakc_96
	; >>>>> Line:	296
	; >>>>> YKQArray[qIndex].start = start; 
	mov	ax, word [qIndex]
	mov	cx, 10
	imul	cx
	mov	si, ax
	add	si, YKQArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	297
	; >>>>> YKQArray[qIndex].headIndex = 0; 
	mov	ax, word [qIndex]
	mov	cx, 10
	imul	cx
	add	ax, YKQArray
	mov	si, ax
	add	si, 4
	mov	word [si], 0
	; >>>>> Line:	298
	; >>>>> YKQArray[qIndex].tailIndex = 0; 
	mov	ax, word [qIndex]
	mov	cx, 10
	imul	cx
	add	ax, YKQArray
	mov	si, ax
	add	si, 6
	mov	word [si], 0
	; >>>>> Line:	299
	; >>>>> YKQArray[qIndex].size = size; 
	mov	ax, word [qIndex]
	mov	cx, 10
	imul	cx
	add	ax, YKQArray
	mov	si, ax
	add	si, 2
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	300
	; >>>>> YKQArray[qIndex].semaphore = YKSemCreate(0); 
	xor	ax, ax
	push	ax
	call	YKSemCreate
	add	sp, 2
	push	ax
	mov	ax, word [qIndex]
	mov	cx, 10
	imul	cx
	mov	dx, ax
	add	dx, YKQArray
	mov	si, dx
	add	si, 8
	pop	ax
	mov	word [si], ax
	; >>>>> Line:	301
	; >>>>> qIndex = qIndex + 1; 
	mov	ax, word [qIndex]
	inc	ax
	mov	word [qIndex], ax
	; >>>>> Line:	302
	; >>>>> return &YKQArray[qIndex-1]; 
	mov	ax, word [qIndex]
	dec	ax
	mov	cx, 10
	imul	cx
	add	ax, YKQArray
	jmp	L_yakc_97
L_yakc_96:
	; >>>>> Line:	304
	; >>>>> return 0; 
	xor	ax, ax
L_yakc_97:
	mov	sp, bp
	pop	bp
	ret
L_yakc_94:
	push	bp
	mov	bp, sp
	jmp	L_yakc_95
	ALIGN	2
YKQFull:
	; >>>>> Line:	308
	; >>>>> { 
	jmp	L_yakc_99
L_yakc_100:
	; >>>>> Line:	309
	; >>>>> if((queue->headIndex == queue->tailIndex + 1) || ((queue->headIndex == 0) && (queue->tailIndex == queue->size - 1))) 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	inc	ax
	mov	si, word [bp+4]
	add	si, 4
	mov	dx, word [si]
	cmp	dx, ax
	je	L_yakc_102
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	test	ax, ax
	jne	L_yakc_101
	mov	si, word [bp+4]
	add	si, 2
	mov	ax, word [si]
	dec	ax
	mov	si, word [bp+4]
	add	si, 6
	mov	dx, word [si]
	cmp	dx, ax
	jne	L_yakc_101
L_yakc_102:
	; >>>>> Line:	311
	; >>>>> return 1; 
	mov	ax, 1
	jmp	L_yakc_103
L_yakc_101:
	; >>>>> Line:	313
	; >>>>> return 0; 
	xor	ax, ax
L_yakc_103:
	mov	sp, bp
	pop	bp
	ret
L_yakc_99:
	push	bp
	mov	bp, sp
	jmp	L_yakc_100
	ALIGN	2
YKQEmpty:
	; >>>>> Line:	317
	; >>>>> { 
	jmp	L_yakc_105
L_yakc_106:
	; >>>>> Line:	319
	; >>>>> if(queue->tailIndex == queue->headIndex) 
	mov	si, word [bp+4]
	add	si, 6
	mov	di, word [bp+4]
	add	di, 4
	mov	ax, word [di]
	cmp	ax, word [si]
	jne	L_yakc_107
	; >>>>> Line:	321
	; >>>>> return 1; 
	mov	ax, 1
	jmp	L_yakc_108
L_yakc_107:
	; >>>>> Line:	323
	; >>>>> return 0; 
	xor	ax, ax
L_yakc_108:
	mov	sp, bp
	pop	bp
	ret
L_yakc_105:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_106
	ALIGN	2
YKQPend:
	; >>>>> Line:	328
	; >>>>> { 
	jmp	L_yakc_110
L_yakc_111:
	; >>>>> Line:	330
	; >>>>> YKEnterMutex(); 
	mov	word [bp-2], 0
	; >>>>> Line:	330
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	331
	; >>>>> if(YKQEmpty(queue)) { 
	push	word [bp+4]
	call	YKQEmpty
	add	sp, 2
	test	ax, ax
	je	L_yakc_112
	; >>>>> Line:	333
	; >>>>> YKSemPend(queue->semaphore); 
	mov	si, word [bp+4]
	add	si, 8
	push	word [si]
	call	YKSemPend
	add	sp, 2
L_yakc_112:
	; >>>>> Line:	336
	; >>>>> returnVal = queue->start[queue->headIndex]; 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	si, word [di]
	mov	ax, word [si]
	mov	word [bp-2], ax
	; >>>>> Line:	337
	; >>>>> queue->headIndex = (queue->headIndex + 1) % queue->size; 
	mov	si, word [bp+4]
	add	si, 4
	mov	ax, word [si]
	inc	ax
	xor	dx, dx
	mov	si, word [bp+4]
	add	si, 2
	div	word [si]
	mov	ax, dx
	mov	si, word [bp+4]
	add	si, 4
	mov	word [si], ax
	; >>>>> Line:	343
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	344
	; >>>>> return returnVal; 
	mov	ax, word [bp-2]
L_yakc_113:
	mov	sp, bp
	pop	bp
	ret
L_yakc_110:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_111
L_yakc_115:
	DB	0
	ALIGN	2
YKQPost:
	; >>>>> Line:	349
	; >>>>> { 
	jmp	L_yakc_116
L_yakc_117:
	; >>>>> Line:	352
	; >>>>> YKEnterMutex(); 
	mov	byte [bp-1], 0
	; >>>>> Line:	352
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	353
	; >>>>> if(YKQFu 
	push	word [bp+4]
	call	YKQFull
	add	sp, 2
	test	ax, ax
	je	L_yakc_118
	; >>>>> Line:	354
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	355
	; >>>>> return 0; 
	xor	ax, ax
	jmp	L_yakc_119
L_yakc_118:
	; >>>>> Line:	357
	; >>>>> if(YKQEmpty(queue) && notFirst) { 
	push	word [bp+4]
	call	YKQEmpty
	add	sp, 2
	test	ax, ax
	je	L_yakc_120
	mov	al, byte [L_yakc_115]
	test	al, al
	je	L_yakc_120
	; >>>>> Line:	358
	; >>>>> wasEmpty = 1; 
	mov	byte [bp-1], 1
L_yakc_120:
	; >>>>> Line:	360
	; >>>>> notFirst = 1; 
	mov	byte [L_yakc_115], 1
	; >>>>> Line:	361
	; >>>>> queue->start[queue->tailIndex] = msg; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	shl	ax, 1
	mov	si, ax
	mov	di, word [bp+4]
	add	si, word [di]
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	367
	; >>>>> queue->tailIndex = (queue->tailIndex + 1) % queue->size; 
	mov	si, word [bp+4]
	add	si, 6
	mov	ax, word [si]
	inc	ax
	xor	dx, dx
	mov	si, word [bp+4]
	add	si, 2
	div	word [si]
	mov	ax, dx
	mov	si, word [bp+4]
	add	si, 6
	mov	word [si], ax
	; >>>>> Line:	369
	; >>>>> if(wasEmpty) { 
	mov	al, byte [bp-1]
	test	al, al
	je	L_yakc_121
	; >>>>> Line:	370
	; >>>>> YKSemPost(queue->semaphore); 
	mov	si, word [bp+4]
	add	si, 8
	push	word [si]
	call	YKSemPost
	add	sp, 2
L_yakc_121:
	; >>>>> Line:	373
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	374
	; >>>>> return 1; 
	mov	ax, 1
L_yakc_119:
	mov	sp, bp
	pop	bp
	ret
L_yakc_116:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_117
	ALIGN	2
YKEventCreate:
	; >>>>> Line:	384
	; >>>>> { 
	jmp	L_yakc_123
L_yakc_124:
	; >>>>> Line:	385
	; >>>>> if(eventIndex < 5) 
	cmp	word [eventIndex], 5
	jae	L_yakc_125
	; >>>>> Line:	387
	; >>>>> YKEventArray[eventIndex].flags = initialValue; 
	mov	ax, word [eventIndex]
	shl	ax, 1
	mov	si, ax
	add	si, YKEventArray
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	388
	; >>>>> eventIndex = eventIndex + 1; 
	mov	ax, word [eventIndex]
	inc	ax
	mov	word [eventIndex], ax
	; >>>>> Line:	389
	; >>>>> return &YKEventArray[eventIndex-1]; 
	mov	ax, word [eventIndex]
	dec	ax
	shl	ax, 1
	add	ax, YKEventArray
	jmp	L_yakc_126
L_yakc_125:
	; >>>>> Line:	391
	; >>>>> return 0; 
	xor	ax, ax
L_yakc_126:
	mov	sp, bp
	pop	bp
	ret
L_yakc_123:
	push	bp
	mov	bp, sp
	jmp	L_yakc_124
L_yakc_128:
	DB	"flag ready",0xA,0
	ALIGN	2
flagReady:
	; >>>>> Line:	395
	; >>>>> { 
	jmp	L_yakc_129
L_yakc_130:
	; >>>>> Line:	396
	; >>>>> if( (int)event && ((event->flags & eventMask) == eventMask) || 
	mov	ax, word [bp+4]
	test	ax, ax
	je	L_yakc_133
	mov	si, word [bp+4]
	mov	ax, word [si]
	and	ax, word [bp+6]
	mov	dx, word [bp+6]
	cmp	dx, ax
	je	L_yakc_132
L_yakc_133:
	mov	si, word [bp+4]
	mov	ax, word [si]
	and	ax, word [bp+6]
	je	L_yakc_131
	mov	ax, word [bp+8]
	test	ax, ax
	jne	L_yakc_131
L_yakc_132:
	; >>>>> Line:	399
	; >>>>> printString("flag ready\n"); 
	mov	ax, L_yakc_128
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	400
	; >>>>> return 1; 
	mov	al, 1
	jmp	L_yakc_134
L_yakc_131:
	; >>>>> Line:	402
	; >>>>> return 0; 
	xor	al, al
L_yakc_134:
	mov	sp, bp
	pop	bp
	ret
L_yakc_129:
	push	bp
	mov	bp, sp
	jmp	L_yakc_130
	ALIGN	2
YKEventPend:
	; >>>>> Line:	406
	; >>>>> { 
	jmp	L_yakc_136
L_yakc_137:
	; >>>>> Line:	407
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	408
	; >>>>> if(flagReady(event, eventMask, waitMode)) { 
	push	word [bp+8]
	push	word [bp+6]
	push	word [bp+4]
	call	flagReady
	add	sp, 6
	test	al, al
	je	L_yakc_138
	; >>>>> Line:	409
	; >>>>> return event->flags; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	jmp	L_yakc_139
L_yakc_138:
	; >>>>> Line:	411
	; >>>>> YKTCBArray[runningTask].state = EVENT_SUSPEND; 
	mov	al, byte [runningTask]
	xor	ah, ah
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 4
	; >>>>> Line:	412
	; >>>>> YKTCBArray[runningTask].event = event; 
	mov	al, byte [runningTask]
	xor	ah, ah
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 18
	mov	ax, word [bp+4]
	mov	word [si], ax
	; >>>>> Line:	413
	; >>>>> = 0; 
	mov	al, byte [runningTask]
	xor	ah, ah
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 14
	mov	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	414
	; >>>>> YKTCBArray[runningTask].eventType = waitMode; 
	mov	al, byte [runningTask]
	xor	ah, ah
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 16
	mov	ax, word [bp+8]
	mov	word [si], ax
	; >>>>> Line:	415
	; >>>>> contextSaved = 0; 
	mov	byte [contextSaved], 0
	; >>>>> Line:	416
	; >>>>> YKScheduler(); 
	call	YKScheduler
	; >>>>> Line:	417
	; >>>>> return event->flags; 
	mov	si, word [bp+4]
	mov	ax, word [si]
L_yakc_139:
	mov	sp, bp
	pop	bp
	ret
L_yakc_136:
	push	bp
	mov	bp, sp
	jmp	L_yakc_137
	ALIGN	2
YKEventSet:
	; >>>>> Line:	421
	; >>>>> { 
	jmp	L_yakc_141
L_yakc_142:
	; >>>>> Line:	423
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	424
	; >>>>> event->flags = event->flags | eventMask; 
	mov	si, word [bp+4]
	mov	ax, word [si]
	or	ax, word [bp+6]
	mov	word [si], ax
	; >>>>> Line:	425
	; >>>>> for(i = 1; i <= 5; i++) 
	mov	word [bp-2], 1
	jmp	L_yakc_144
L_yakc_143:
	; >>>>> Line:	427
	; >>>>> if(!YKTCBArray[i].inUse) 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 12
	mov	al, byte [si]
	test	al, al
	jne	L_yakc_147
	; >>>>> Line:	429
	; >>>>> break; 
	jmp	L_yakc_145
L_yakc_147:
	; >>>>> Line:	431
	; >>>>> if(flagReady(YKTCBArray[i].event, YKTCBArray[i].flagMask, YKTCBArray[i].eventType)) 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 16
	push	word [si]
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 14
	push	word [si]
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 18
	push	word [si]
	call	flagReady
	add	sp, 6
	test	al, al
	je	L_yakc_148
	; >>>>> Line:	433
	; >>>>> if((YKTCBArray[i].event == event)) 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 18
	mov	ax, word [bp+4]
	cmp	ax, word [si]
	jne	L_yakc_149
	; >>>>> Line:	435
	; >>>>> YKTCBArray[i].event = 0; 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 18
	mov	word [si], 0
	; >>>>> Line:	436
	; >>>>> YKTCBArr 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 14
	mov	word [si], 0
	; >>>>> Line:	437
	; >>>>> YKTCBArray[i].state = READY; 
	mov	ax, word [bp-2]
	mov	cx, 20
	imul	cx
	add	ax, YKTCBArray
	mov	si, ax
	add	si, 4
	mov	word [si], 3
L_yakc_149:
L_yakc_148:
L_yakc_146:
	inc	word [bp-2]
L_yakc_144:
	cmp	word [bp-2], 5
	jle	L_yakc_143
L_yakc_145:
	; >>>>> Line:	441
	; >>>>> contextSaved = 0; 
	mov	byte [contextSaved], 0
	; >>>>> Line:	442
	; >>>>> YKScheduler(); 
	call	YKScheduler
	mov	sp, bp
	pop	bp
	ret
L_yakc_141:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_yakc_142
	ALIGN	2
YKEventReset:
	; >>>>> Line:	446
	; >>>>> { 
	jmp	L_yakc_151
L_yakc_152:
	; >>>>> Line:	447
	; >>>>> event->flags = event->flags & ~eventMask; 
	mov	ax, word [bp+6]
	not	ax
	mov	si, word [bp+4]
	and	ax, word [si]
	mov	word [si], ax
	mov	sp, bp
	pop	bp
	ret
L_yakc_151:
	push	bp
	mov	bp, sp
	jmp	L_yakc_152
	ALIGN	2
YKCtxSwCount:
	TIMES	2 db 0
YKIdleCount:
	TIMES	2 db 0
YKTickNum:
	TIMES	2 db 0
IdleStk:
	TIMES	512 db 0
currentTask:
	TIMES	2 db 0
nextTask:
	TIMES	2 db 0
YKTCBArray:
	TIMES	120 db 0
YKSemArray:
	TIMES	30 db 0
YKQArray:
	TIMES	50 db 0
YKEventArray:
	TIMES	10 db 0
;Kernel routines written in assembly

YKEnterMutex:
	cli
	ret

YKExitMutex:
	sti
	ret

YKDispatcherFirst:
	mov		bx, [nextTask]
	mov 	sp, [bx + 2]
	pop		ds
	pop 	es
	pop 	di
	pop 	si
	pop 	dx
	pop 	cx
	pop 	bx
	pop 	ax
	pop 	bp
	iret

YKDispatcher:
	pushf
	push	cs
	push	word[bp+2]
	push 	bp
	push 	ax
	push 	bx
	push 	cx
	push 	dx
	push 	si
	push 	di
	push 	es
	push 	ds
	;call pushed

	mov 	bx, [currentTask]
	mov		[bx + 2], sp

	mov		bx, [nextTask]
	mov 	sp, [bx + 2]
	pop		ds
	pop 	es
	pop 	di
	pop 	si
 	pop 	dx
	pop 	cx
  pop 	bx
  pop 	ax
	pop 	bp
	;call popped
  iret

YKCreateContext:
	push	bp
	mov		bp, sp
	push  word[bp + 4]
	mov		[bp + 4], sp
	pop 	sp
	push	word[FLAGS_MASK]
	push 	cs
	push	word[bp + 6]
	push 	bp
	push 	ax
	push 	bx
	push 	cx
	push 	dx
	push 	si
	push 	di
	push 	es
	push 	ds

	mov		sp, [bp + 4]
	pop 	bp
	pop		bp
	ret

YKDispatcherNoSave:
	mov 	bx, [currentTask]
	add		sp, 14
	mov		[bx + 2], sp

	mov		bx, [nextTask]
	mov 	sp, [bx + 2]
	pop		ds
	pop 	es
	pop 	di
	pop 	si
	pop 	dx
	pop 	cx
	pop 	bx
	pop 	ax
	pop 	bp
	;call popped
	iret
; Generated by c86 (BYU-NASM) 5.1 (beta) from lab7app.i
	CPU	8086
	ALIGN	2
	jmp	main	; Jump to program start
L_lab7app_5:
	DB	"CharTask     (C)",0xA,0
L_lab7app_4:
	DB	"CharTask     (B)",0xA,0
L_lab7app_3:
	DB	"CharTask     (A)",0xA,0
L_lab7app_2:
	DB	"Oops! At least one event should be set in return value!",0xA,0
L_lab7app_1:
	DB	"Started CharTask     (2)",0xA,0
	ALIGN	2
CharTask:
	; >>>>> Line:	26
	; >>>>> { 
	jmp	L_lab7app_6
L_lab7app_7:
	; >>>>> Line:	29
	; >>>>> printString("Started CharTask     (2)\n"); 
	mov	ax, L_lab7app_1
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	31
	; >>>>> while(1) { 
	jmp	L_lab7app_9
L_lab7app_8:
	; >>>>> Line:	32
	; >>>>> events = YKEventPend(charEvent, 
	xor	ax, ax
	push	ax
	mov	ax, 7
	push	ax
	push	word [charEvent]
	call	YKEventPend
	add	sp, 6
	mov	word [bp-2], ax
	; >>>>> Line:	36
	; >>>>> if(events == 0) { 
	mov	ax, word [bp-2]
	test	ax, ax
	jne	L_lab7app_11
	; >>>>> Line:	37
	; >>>>> printString("Oops! At least one event should be set " 
	mov	ax, L_lab7app_2
	push	ax
	call	printString
	add	sp, 2
L_lab7app_11:
	; >>>>> Line:	41
	; >>>>> if(events & 0x1) { 
	mov	ax, word [bp-2]
	and	ax, 1
	je	L_lab7app_12
	; >>>>> Line:	42
	; >>>>> printString("CharTask     (A)\n"); 
	mov	ax, L_lab7app_3
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	43
	; >>>>> YKEventReset(charEvent, 0x1 
	mov	ax, 1
	push	ax
	push	word [charEvent]
	call	YKEventReset
	add	sp, 4
L_lab7app_12:
	; >>>>> Line:	46
	; >>>>> if(events & 0x2) { 
	mov	ax, word [bp-2]
	and	ax, 2
	je	L_lab7app_13
	; >>>>> Line:	47
	; >>>>> printString("CharTask     (B)\n"); 
	mov	ax, L_lab7app_4
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	48
	; >>>>> YKEventReset(charEvent, 0x2); 
	mov	ax, 2
	push	ax
	push	word [charEvent]
	call	YKEventReset
	add	sp, 4
L_lab7app_13:
	; >>>>> Line:	51
	; >>>>> if(events & 0x4) { 
	mov	ax, word [bp-2]
	and	ax, 4
	je	L_lab7app_14
	; >>>>> Line:	52
	; >>>>> printString("CharTask     (C)\n"); 
	mov	ax, L_lab7app_5
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	53
	; >>>>> YKEventReset(charEvent, 0x4); 
	mov	ax, 4
	push	ax
	push	word [charEvent]
	call	YKEventReset
	add	sp, 4
L_lab7app_14:
L_lab7app_9:
	jmp	L_lab7app_8
L_lab7app_10:
	mov	sp, bp
	pop	bp
	ret
L_lab7app_6:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab7app_7
L_lab7app_18:
	DB	"AllCharsTask (D)",0xA,0
L_lab7app_17:
	DB	"Oops! Char events weren't reset by CharTask!",0xA,0
L_lab7app_16:
	DB	"Started AllCharsTask (3)",0xA,0
	ALIGN	2
AllCharsTask:
	; >>>>> Line:	60
	; >>>>> { 
	jmp	L_lab7app_19
L_lab7app_20:
	; >>>>> Line:	63
	; >>>>> printString("Started AllCharsTask (3)\n"); 
	mov	ax, L_lab7app_16
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	65
	; >>>>> while(1) { 
	jmp	L_lab7app_22
L_lab7app_21:
	; >>>>> Line:	66
	; >>>>> events = YKEventPend(charEvent, 
	mov	ax, 1
	push	ax
	mov	ax, 7
	push	ax
	push	word [charEvent]
	call	YKEventPend
	add	sp, 6
	mov	word [bp-2], ax
	; >>>>> Line:	71
	; >>>>>  
	mov	ax, word [bp-2]
	test	ax, ax
	je	L_lab7app_24
	; >>>>> Line:	72
	; >>>>> printString("Oops! Char events weren't reset by CharTask!\n"); 
	mov	ax, L_lab7app_17
	push	ax
	call	printString
	add	sp, 2
L_lab7app_24:
	; >>>>> Line:	75
	; >>>>> printString("AllCharsTask (D)\n"); 
	mov	ax, L_lab7app_18
	push	ax
	call	printString
	add	sp, 2
L_lab7app_22:
	jmp	L_lab7app_21
L_lab7app_23:
	mov	sp, bp
	pop	bp
	ret
L_lab7app_19:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab7app_20
L_lab7app_28:
	DB	"AllNumsTask  (123)",0xA,0
L_lab7app_27:
	DB	"Oops! All events should be set in return value!",0xA,0
L_lab7app_26:
	DB	"Started AllNumsTask  (1)",0xA,0
	ALIGN	2
AllNumsTask:
	; >>>>> Line:	81
	; >>>>> { 
	jmp	L_lab7app_29
L_lab7app_30:
	; >>>>> Line:	84
	; >>>>> printString("Started AllNumsTask  (1)\n"); 
	mov	ax, L_lab7app_26
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	86
	; >>>>> while(1) { 
	jmp	L_lab7app_32
L_lab7app_31:
	; >>>>> Line:	87
	; >>>>> events = YKEventPend(numEvent, 
	mov	ax, 1
	push	ax
	mov	ax, 7
	push	ax
	push	word [numEvent]
	call	YKEventPend
	add	sp, 6
	mov	word [bp-2], ax
	; >>>>> Line:	91
	; >>>>> if(events != (0x1 | 0x2 | 0x4)) { 
	cmp	word [bp-2], 7
	je	L_lab7app_34
	; >>>>> Line:	92
	; >>>>> printString("Oops! All events should be set in return value!\n"); 
	mov	ax, L_lab7app_27
	push	ax
	call	printString
	add	sp, 2
L_lab7app_34:
	; >>>>> Line:	95
	; >>>>> printString("AllNumsTask  (123)\n"); 
	mov	ax, L_lab7app_28
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	97
	; >>>>> YKEventReset(numEvent, 0x1 | 0x2 | 0x4); 
	mov	ax, 7
	push	ax
	push	word [numEvent]
	call	YKEventReset
	add	sp, 4
L_lab7app_32:
	jmp	L_lab7app_31
L_lab7app_33:
	mov	sp, bp
	pop	bp
	ret
L_lab7app_29:
	push	bp
	mov	bp, sp
	push	cx
	jmp	L_lab7app_30
L_lab7app_40:
	DB	"% >>>>>",0xD,0xA,0
L_lab7app_39:
	DB	", CPU usage: ",0
L_lab7app_38:
	DB	"<<<<< Context switches: ",0
L_lab7app_37:
	DB	"Determining CPU capacity",0xD,0xA,0
L_lab7app_36:
	DB	"Welcome to the YAK kernel",0xD,0xA,0
	ALIGN	2
STask:
	; >>>>> Line:	103
	; >>>>> { 
	jmp	L_lab7app_41
L_lab7app_42:
	; >>>>> Line:	107
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	108
	; >>>>> printString("Welcome to the YAK kernel\r\n"); 
	mov	ax, L_lab7app_36
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	109
	; >>>>> printString("Determining CPU capacity\r\n"); 
	mov	ax, L_lab7app_37
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	110
	; >>>>> YKDelayTask(1); 
	mov	ax, 1
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	111
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	112
	; >>>>> YKDelayTask(5); 
	mov	ax, 5
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	113
	; >>>>> max = YKIdleCount / 25; 
	mov	ax, word [YKIdleCount]
	xor	dx, dx
	mov	cx, 25
	div	cx
	mov	word [bp-2], ax
	; >>>>> Line:	114
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	116
	; >>>>> YKNewTask(CharTask, (void *) &CharTaskStk[512], 2); 
	mov	al, 2
	push	ax
	mov	ax, (CharTaskStk+1024)
	push	ax
	mov	ax, CharTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	117
	; >>>>> YKNewTask(AllNumsTask, (void *)  
	mov	al, 1
	push	ax
	mov	ax, (AllNumsTaskStk+1024)
	push	ax
	mov	ax, AllNumsTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	118
	; >>>>> YKNewTask(AllCharsTask, (void *) &AllCharsTaskStk[512], 3); 
	mov	al, 3
	push	ax
	mov	ax, (AllCharsTaskStk+1024)
	push	ax
	mov	ax, AllCharsTask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	120
	; >>>>> while (1) 
	jmp	L_lab7app_44
L_lab7app_43:
	; >>>>> Line:	122
	; >>>>> YKDelayTask(20); 
	mov	ax, 20
	push	ax
	call	YKDelayTask
	add	sp, 2
	; >>>>> Line:	124
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	125
	; >>>>> switchCount = YKCtxSwCount; 
	mov	ax, word [YKCtxSwCount]
	mov	word [bp-4], ax
	; >>>>> Line:	126
	; >>>>> idleCount = YKIdleCount; 
	mov	ax, word [YKIdleCount]
	mov	word [bp-6], ax
	; >>>>> Line:	127
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
	; >>>>> Line:	129
	; >>>>> printString("<<<<< Context switches: "); 
	mov	ax, L_lab7app_38
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	130
	; >>>>> printInt((int)switchCount); 
	push	word [bp-4]
	call	printInt
	add	sp, 2
	; >>>>> Line:	131
	; >>>>> printString(", CPU usage: "); 
	mov	ax, L_lab7app_39
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	132
	; >>>>> tmp = (int) (idleCount/max); 
	mov	ax, word [bp-6]
	xor	dx, dx
	div	word [bp-2]
	mov	word [bp-8], ax
	; >>>>> Line:	133
	; >>>>> printInt(100-tmp); 
	mov	ax, 100
	sub	ax, word [bp-8]
	push	ax
	call	printInt
	add	sp, 2
	; >>>>> Line:	134
	; >>>>> printString("% >>>>>\r\n"); 
	mov	ax, L_lab7app_40
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	136
	; >>>>> YKEnterMutex(); 
	call	YKEnterMutex
	; >>>>> Line:	137
	; >>>>> YK 
	mov	word [YKCtxSwCount], 0
	; >>>>> Line:	138
	; >>>>> YKIdleCount = 0; 
	mov	word [YKIdleCount], 0
	; >>>>> Line:	139
	; >>>>> YKExitMutex(); 
	call	YKExitMutex
L_lab7app_44:
	jmp	L_lab7app_43
L_lab7app_45:
	mov	sp, bp
	pop	bp
	ret
L_lab7app_41:
	push	bp
	mov	bp, sp
	sub	sp, 8
	jmp	L_lab7app_42
L_lab7app_48:
	DB	"numEvent: ",0
L_lab7app_47:
	DB	"charEvent: ",0
	ALIGN	2
main:
	; >>>>> Line:	145
	; >>>>> { 
	jmp	L_lab7app_49
L_lab7app_50:
	; >>>>> Line:	146
	; >>>>> YKInitialize(); 
	call	YKInitialize
	; >>>>> Line:	148
	; >>>>> charEvent = YKEventCreate(0); 
	xor	ax, ax
	push	ax
	call	YKEventCreate
	add	sp, 2
	mov	word [charEvent], ax
	; >>>>> Line:	149
	; >>>>> printString("charEvent: "); 
	mov	ax, L_lab7app_47
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	150
	; >>>>> printWord(charEvent); 
	push	word [charEvent]
	call	printWord
	add	sp, 2
	; >>>>> Line:	151
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	152
	; >>>>> numEvent = YKEventCreate(0); 
	xor	ax, ax
	push	ax
	call	YKEventCreate
	add	sp, 2
	mov	word [numEvent], ax
	; >>>>> Line:	153
	; >>>>> printString("numEvent: "); 
	mov	ax, L_lab7app_48
	push	ax
	call	printString
	add	sp, 2
	; >>>>> Line:	154
	; >>>>> printWord(numEvent); 
	push	word [numEvent]
	call	printWord
	add	sp, 2
	; >>>>> Line:	155
	; >>>>> printNewLine(); 
	call	printNewLine
	; >>>>> Line:	156
	; >>>>> YKNewTask(STask, (void *) &STaskStk[512], 0); 
	xor	al, al
	push	ax
	mov	ax, (STaskStk+1024)
	push	ax
	mov	ax, STask
	push	ax
	call	YKNewTask
	add	sp, 6
	; >>>>> Line:	158
	; >>>>> YKRun(); 
	call	YKRun
	mov	sp, bp
	pop	bp
	ret
L_lab7app_49:
	push	bp
	mov	bp, sp
	jmp	L_lab7app_50
	ALIGN	2
charEvent:
	TIMES	2 db 0
numEvent:
	TIMES	2 db 0
CharTaskStk:
	TIMES	1024 db 0
AllCharsTaskStk:
	TIMES	1024 db 0
AllNumsTaskStk:
	TIMES	1024 db 0
STaskStk:
	TIMES	1024 db 0
